@using QLite.Data.Models.ViewModels;
@using System.Text;
@model FormPartialViewModel

<form asp-controller="GenericTable" asp-action="@(Model.Action == "Add" ? "Create" : "Edit")" method="post" id="@(Model.Action == "Add" ? "createForm" : "editForm")">
    <div class="row">
        @foreach (var property in Model.FilteredProperties)
        {
            var value = GetValue(property);

            @if (!ShouldSkipProperty(property))
            {
                <div class="col-md-6 mb-6">
                    <div class="form-group">
                        <label for="@property.Name">

                            @Html.Raw(RenderLabel(property))
                            @Html.Raw(RenderInput(property))

                        </label>

                    </div>
                </div>
            }
            //Render a hidden Oid property to be included in the submitted form
            else
            {
                <input hidden type="text" name="@property.Name" id="@property.Name" value="@value" />

            }
        }
    </div>

    <button type="button" id="submit" class="btn btn-bg-success mt-3">@((Model.Action == "Add" ? "Create" : "Save"))</button>
</form>

@functions {

    string RenderLabel(PropertyInfo property)
    {
        var propertyName = property.Name;
        var viewModelProperty = Model.ViewModelProperties?.FirstOrDefault(vp => vp.Name == propertyName);
        var isRequired = viewModelProperty?.GetCustomAttribute<RequiredAttribute>() != null;

        if (isRequired)
        {
            return $"<span style=\"color: red;\">*</span><h5>{propertyName}</h5>";
        }

        return $"<h5>{propertyName}</h5>";
    }


    bool ShouldSkipProperty(PropertyInfo property)
    {
        var propertyName = property.Name;
        var isOidProperty = propertyName.Contains("Oid");
        var viewModelProperty = Model.ViewModelProperties?.FirstOrDefault(vp => vp.Name == propertyName);
        var isNonEditable = viewModelProperty?.GetCustomAttribute<NonEditableAttribute>() != null;

        return isOidProperty || (Model.Action == "Add" && isNonEditable);
    }


    string RenderInput(PropertyInfo property)
    {
        var propertyName = property.Name;
        var value = GetValue(property);
        var viewModelProperty = Model.ViewModelProperties?.FirstOrDefault(vp => vp.Name == propertyName);
        var isJsonInput = viewModelProperty?.GetCustomAttribute<JsonInputAttribute>() != null;
        var isBoolean = viewModelProperty?.GetCustomAttribute<BooleanAttribute>() != null;
        var isDate = viewModelProperty?.GetCustomAttribute<DateAtrribute>() != null;
        var isEnum = viewModelProperty?.GetCustomAttribute<EnumAttribute>() != null;
        var isIcon = viewModelProperty?.GetCustomAttribute<IconAttribute>() != null;
        var isNonEditable = viewModelProperty?.GetCustomAttribute<NonEditableAttribute>() != null;
        var isHidden = viewModelProperty?.GetCustomAttribute<NotForTableAttribute>() != null;
        var isDropDown = (Model.DropDowns?.ContainsKey(property.Name) ?? false);

        var propertyToLower = Char.ToLower(propertyName[0]) + propertyName.Substring(1);

        string formDataValue = "";

        if (Model.Action == "Edit")
        {
            formDataValue = Model.FormData[propertyToLower] != null ? Model.FormData[propertyToLower] : "";
        }

      

        switch (true)
        {
            case bool _ when isJsonInput:
                return $"<textarea name=\"{propertyName}\" id=\"{propertyName}\" class=\"form-control\" rows=\"5\">{value}</textarea>";

            case bool _ when isBoolean:
                return RenderCheckBoxInput(property, value);

            case bool _ when isDate:
                return $"<input type=\"time\" name=\"{propertyName}\" id=\"{propertyName}\" class=\"form-control\" value=\"{GetTimeValue(value)}\" />";

            case bool _ when isNonEditable:
                return $"<input type=\"text\" name=\"{propertyName}\" id=\"{propertyName}\" class=\"form-control\" value=\"{value}\" disabled />";

            case bool _ when isIcon:
                return RenderIconInput(property, value);

            case bool _ when isEnum:
                return RenderEnumInput(property, viewModelProperty, formDataValue, propertyToLower);

            case bool _ when isHidden:
                return "";

            case bool _ when isDropDown:
                return RenderDropDown(property, propertyToLower, formDataValue);

            default:
                return $"<input type=\"text\" name=\"{propertyName}\" id=\"{propertyName}\" class=\"form-control\" value=\"{value}\" />";
        }
    }

    string RenderCheckBoxInput(PropertyInfo property, string value)
    {
        var propertyName = property.Name;
        var isChecked = value != null && value.Equals("true", StringComparison.OrdinalIgnoreCase);

        var sb = new StringBuilder();

        // Render the hidden input field to ensure the value is included in the form submission
        sb.AppendLine($"<input type=\"hidden\" name=\"{propertyName}\" value=\"false\" />");

        // Render the checkbox input field
        sb.AppendLine($"<input type=\"checkbox\" name=\"{propertyName}\" id=\"{propertyName}\" {(isChecked ? "checked" : "")} onclick=\"handleCheckbox('{propertyName}')\" />");

        return sb.ToString();
    }

    string RenderDropDown(PropertyInfo property, string propertyToLower, string formDataValue)
    {
        var propertyName = property.Name;
        var sb = new StringBuilder();

        sb.AppendLine($"<select name=\"{propertyName}\" id=\"{propertyName}\" class=\"form-select form-select-lg form-select-solid\">");
        sb.AppendLine("<option value=\"\">-- None --</option>");

        foreach (var item in Model.DropDowns[property.Name])
        {
            var isSelected = false;
            isSelected = Model.FormData?.ContainsKey(propertyToLower) == true &&
                         item.name.ToString().Trim('{', '}').Equals(formDataValue.Trim('"'));
            sb.AppendLine($"<option value=\"{item.oid}\" {(isSelected ? "selected" : "")}>{item.name}</option>");

        }

        sb.AppendLine("</select>");

        return sb.ToString();
    }


    string RenderEnumInput(PropertyInfo property, PropertyInfo viewModelProperty, string formDataValue, string propertyToLower)
    {

        var enumType = viewModelProperty.PropertyType;
        var enumValues = Enum.GetValues(enumType);

        var sb = new StringBuilder();
        sb.Append($"<select name=\"{property.Name}\" id=\"{property.Name}\" class=\"form-select form-select-lg form-select-solid\">");
        sb.Append($"<option value=\"\">Select {property.Name}</option>");

        foreach (var enumValue in enumValues)
        {
            var isSelected = false;

            var enumIntValue = Convert.ToInt32(enumValue);
           isSelected = Model.FormData?.ContainsKey(propertyToLower) == true &&
                    enumIntValue.ToString() == formDataValue;
            sb.Append($"<option value=\"{enumIntValue}\" {(isSelected ? "selected" : "")}>");
            sb.Append($"{enumValue}</option>");
        }

        sb.Append("</select>");

        return sb.ToString();
    }

    string RenderIconInput(PropertyInfo property, string value)
    {
        var propertyName = property.Name;
        var fileInputId = $"{propertyName}FileInput";
        var previewId = $"{propertyName}Preview";
        var hiddenInputId = $"{propertyName}HiddenInput";

        var sb = new StringBuilder();
        sb.AppendLine("<div class=\"custom-file\">");
        sb.AppendLine($"<input type=\"file\" class=\"custom-file-input\" id=\"{fileInputId}\" accept=\"image/*\" onchange=\"handleFileSelect('{propertyName}', '{fileInputId}')\">");
        sb.AppendLine("</div>");

        if (!string.IsNullOrEmpty(value))
        {
            sb.AppendLine($"<img id=\"{previewId}\" style=\"width: 50%; max-height: 10rem; margin-top: 5px;\" src=\"data:image/jpg;base64,{value}\" alt=\"{propertyName}\" />");
        }
        else
        {
            sb.AppendLine($"<img id=\"{previewId}\" style=\"width: 50%; max-height: 10rem; margin-top: 5px;\" src=\"/img/noImage.jpg\" alt=\"{propertyName}\" />");
        }

        sb.AppendLine($"<input type=\"hidden\" id=\"{hiddenInputId}\" name=\"{propertyName}\" value=\"{value}\" />");

        return sb.ToString();
    }


    string GetValue(PropertyInfo property)
    {
        var propertyName = property.Name;
        var propertyToLower = Char.ToLower(propertyName[0]) + propertyName.Substring(1);

        if (Model.FormData?.ContainsKey(propertyToLower) == true)
        {
            return Model.FormData[propertyToLower];
        }

        return "";
    }
    string GetTimeValue(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            DateTime dateTime = DateTime.Parse(value);
            return dateTime.ToString("HH:mm");
        }

        return "";
    }





}
<script>
    function handleCheckbox(name) {
        var checkbox = document.getElementById(name);
        if (checkbox.checked) {
            checkbox.value = "true";
        } else {
            checkbox.value = "false";
        }
    }
</script>
