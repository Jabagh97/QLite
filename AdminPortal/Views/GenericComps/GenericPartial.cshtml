@using QLite.Data.Models.ViewModels;
@model Type

@{
    var modelProperties = Model.GetProperties();
    var viewModelType = ViewBag.ViewModel as Type;
    var viewModelProperties = viewModelType?.GetProperties().Where(property => property.PropertyType != typeof(ICollection<object>));


    var ICollectionProperties = modelProperties.Where(p => p.PropertyType.IsGenericType && p.PropertyType.GetGenericTypeDefinition() == typeof(ICollection<>)
                                    && viewModelType.GetProperties().Any(vp => vp.Name == p.Name));



    var filteredProperties = modelProperties
        .Where(mp => viewModelProperties.Any(vp => vp.Name == mp.Name || mp.Name == "Oid"));
    var action = ViewBag.Action as string;
    var dropDowns = ViewBag.DropDowns as Dictionary<string, List<dynamic>>;
    var formData = ViewBag.Data as Dictionary<string, string>;
}


<div id="table_wrapper">
    @*Main Form*@
    @if (action == "Edit")
    {
        <button id="backButton" onclick="back()" class="btn btn-icon-dark btn-text-primary">
            <i class="fas fa-arrow-left"></i> Back
        </button>
    }

    @if (action == "Add" || action == "Edit")
    {
        <partial name="_FormPartial"
             model="@new FormPartialViewModel
                 {
                     Action = action,
                     FilteredProperties = filteredProperties,
                     DropDowns = dropDowns,
                     FormData = formData,
                     ViewModelProperties = viewModelProperties
                 }" />
    }


    @*Tabs for lists*@

    @if (ICollectionProperties.Any() && action == "Edit")
    {
        <partial name="_TabPartial"
             model="@new TabPartialViewModel
                     {
                         ICollectionProperties = ICollectionProperties,
                         ModelType = Model,
                         FormData = formData
                     }" />
    }
</div>
