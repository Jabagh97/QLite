@model Type

@{
    var properties = Model.GetProperties();
    var columnDefinitions = properties
    .Where(property => property.GetCustomAttribute<NotForTableAttribute>() == null)
    .Select(property => new
    {
        // Lowercase the first letter of the property name
        data = char.ToLower(property.Name[0]) + property.Name.Substring(1),
        property = property,
        title = Html.DisplayName(property.Name).ToString(),
        isBool = property.GetCustomAttribute<BooleanAttribute>() != null,
        isEnum = property.GetCustomAttribute<EnumAttribute>() != null,
        isDate = property.GetCustomAttribute<DateAtrribute>() != null,
        isIcon = property.GetCustomAttribute<IconAttribute>() != null,
    })
    .ToList();

}

<div id="kt_app_content" class="app-content flex-column-fluid">
    <div id="kt_app_content_container" class="app-container container-fluid">
        <!--begin::Wrapper-->
        <div class="d-flex flex-stack mb-5">
            <!-- Your wrapper content goes here if needed -->
        </div>
        <!--end::Wrapper-->
        <!--begin::Datatable-->

        <div id="Wrapper">
            <table id="table" class="table table-hover table-rounded border gy-7 gs-7" style="box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                <thead>
                    <tr class="fw-semibold fs-7 text-primary border-bottom border-gray-200 py-4">
                        @foreach (var column in columnDefinitions)
                        {
                            <th>@column.title</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    <!-- Your table body content goes here -->
                </tbody>
            </table>
        </div>
        <!--end::Datatable-->
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Serialize columnDefinitions to a JSON string in Razor, then parse it in JavaScript
            var columnDefinitionsJson = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(columnDefinitions.Select(column => new
            {
            data = column.data,
            name = column.property.Name,
            title = column.title,
            isBool = column.isBool,
            isEnum = column.isEnum,
            isDate = column.isDate,
            isIcon = column.isIcon,
            enumMapping = column.isEnum ? Enum.GetValues(column.property.PropertyType)
            .Cast<Enum>()
            .ToDictionary(t => Convert.ToInt32(t).ToString(), t => t.ToString()) : null
            }), Newtonsoft.Json.Formatting.None));

            var columnDefinitions = columnDefinitionsJson.map(function (column) {
                var obj = {
                    data: column.data,
                    name: column.name,
                    title: column.title
                };

                if (column.isIcon) {
                    obj.render = function (data, type, row, meta) {
                        if (data != null) {
                            return '<img style="width: 50%; max-height: 10rem;" src="' + data + '" />';   
                        }
                        return '';
                    };
                }
                else if (column.isBool) {
                    obj.render = function (data, type, row, meta) {
                        var color = data === false ? 'red' : 'green';
                        return '<span style="color: ' + color + ';font-weight:600;">' + data + '</span>';
                    };
                }
                else if (column.isDate) {
                    obj.render = function (data, type, row, meta) {
                        var date = new Date(data);
                        var formattedTime = ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2);
                        return formattedTime;
                    };
                }
                else if (column.isEnum && column.enumMapping) {
                    obj.render = function (data, type, row, meta) {
                        return column.enumMapping[data] || data;
                    };
                }

                return obj;
            });

            var modelName = '@Model.Name.Replace("ViewModel", "")';
            initializeDataTable(modelName, columnDefinitions);
        });
    </script>
}

