@using Newtonsoft.Json;
@using QLite.DesignComponents;
@using System.Text;
@model DesPageData


@{
    Layout = "_DesingerLayout.cshtml";

}

<!--begin::Container-->
<div id="kt_content_container" class="container-xxl">

    @if (Model != null && Model.Comps != null)
    {
        <div id="canvas-container"
         style="
            width: @(Model.Width ?? "800px");
            height: @(Model.Height ?? "600px");
            background-image: url('@(Model.BgImageUrl ?? "")');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            border: 1px solid black;
            background-color: @(Model.BackGroundColor ?? "grey");

            ">
            @foreach (var comp in Model.Comps)
            {
                @Html.Raw(RenderComponent(comp))
            }
        </div>
        <script>

            // Initialize a JavaScript object similar to DesPageData class
            var desPageData = {
                Name: "",
                PosY: "",
                Width: "",
                Height: "",
                BgImageUrl: "",
                BackGroundColor: "",
                CustomCss: "",
                Comps: []
            };
            var desPageData = @Html.Raw(JsonConvert.SerializeObject(Model, new DesCompJsonConverter()));

            console.log(desPageData)
        </script>
    }
    else
    {

        <div id="canvas-container"
         style="
            width:800px;
            height:800px;
            border: 1px solid black;
            margin-top: 10px;
            background-color: grey;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            border: 1px solid black;">

            <script>

                // Initialize a JavaScript object similar to DesPageData class
                var desPageData = {
                    Name: "",
                    PosY: "",
                    Width: "",
                    Height: "",
                    BgImageUrl: "",
                    BackGroundColor: "",
                    CustomCss: "",
                    Comps: []
                };


                console.log(desPageData)
            </script>
        </div>

    }
</div>

<!--end::Container-->
@functions {
    public string RenderComponent(DesCompData comp)
    {
        switch (comp)
        {
            case DesCompDataText textComp:
                return RenderTextComponent(textComp);
            case DesCompDataServiceButton buttonComp:
                return RenderServiceButton(buttonComp);

            case DesCompDataWfButton wfButtonComp:
                return RenderWfButtonComponent(wfButtonComp);

            case DesCompDataSegment segmentComp:
                return RenderSegmentComponent(segmentComp);

            case DesCompDataGenericHtml htmlComp:
                return RenderGenericHtmlComponent(htmlComp);
            case DesCompDataFrame frameComp:
                return RenderFrameComponent(frameComp);

            case DesCompDataLang langComp:
                return RenderLangComponent(langComp);
            // Add cases for other component types here
            default:
                return string.Empty; // Unknown component type
        }
    }

    public string RenderSegmentComponent(DesCompDataSegment comp)
    {
        StringBuilder sb = new StringBuilder();

        sb.Append($"<button id=\"{comp.Id}\" ");
        sb.Append($"data-comp-id=\"{comp.Id}\" ");
        sb.Append($"data-x=\"{comp.PosX}\" ");
        sb.Append($"data-y=\"{comp.PosY}\" ");
        sb.Append("class=\"resize-drag\" ");
        sb.Append("style=\"position: absolute; ");
        sb.AppendFormat("width:{0}; ", comp.Width);
        sb.AppendFormat("height:{0}; ", comp.Height);
        sb.AppendFormat("transform: translate({0}, {1}); ", comp.PosX, comp.PosY);

        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            sb.Append(comp.CustomCss);
        }

        sb.Append("\"> ");
        sb.Append("<div class=\"drag-icon\"></div>");
        sb.Append("<div class=\"panel-icon\" onclick=\"showModal('");
        sb.Append(comp.Id);
        sb.Append("', '");
        sb.Append(comp.ButtonText);
        sb.Append("', '");
        sb.Append(comp.DesCompType);
        sb.Append("')\"></div>");
        sb.Append(comp.ButtonText);
        sb.Append("</button>");

        return sb.ToString();
    }

    public string RenderTextComponent(DesCompDataText comp)
    {
        StringBuilder sb = new StringBuilder();

        sb.Append($"<div id=\"{comp.Id}\" ");
        sb.Append($"data-comp-id=\"{comp.Id}\" ");
        sb.Append($"data-x=\"{comp.PosX}\" ");
        sb.Append($"data-y=\"{comp.PosY}\" ");
        sb.Append("class=\"resize-drag\" ");
        sb.Append("style=\"position: absolute; ");
        sb.AppendFormat("width:{0}; ", comp.Width);
        sb.AppendFormat("height:{0}; ", comp.Height);
        sb.AppendFormat("transform: translate({0}, {1}); ", comp.PosX, comp.PosY);

        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            sb.Append(comp.CustomCss);
        }

        sb.Append("\"> ");
        sb.Append($"<div id=\"{comp.Id}_text\">{comp.Text}</div>");

        sb.Append("<div class=\"drag-icon\"></div>");
        sb.Append("<div class=\"panel-icon\" onclick=\"showModal('");
        sb.Append(comp.Id);
        sb.Append("', '");
        sb.Append(comp.Text);
        sb.Append("', '");
        sb.Append(comp.DesCompType);
        sb.Append("')\"></div>");
        sb.Append("</div>");

        return sb.ToString();
    }

    public string RenderServiceButton(DesCompDataServiceButton comp)
    {
        StringBuilder sb = new StringBuilder();

        sb.Append($"<button id=\"{comp.Id}\" ");
        sb.Append($"data-comp-id=\"{comp.Id}\" ");
        sb.Append($"data-x=\"{comp.PosX}\" ");
        sb.Append($"data-y=\"{comp.PosY}\" ");
        sb.Append("class=\"resize-drag\" ");
        sb.Append("style=\"position: absolute; ");
        sb.AppendFormat("width:{0}; ", comp.Width);
        sb.AppendFormat("height:{0}; ", comp.Height);
        sb.AppendFormat("transform: translate({0}, {1}); ", comp.PosX, comp.PosY);

        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            sb.Append(comp.CustomCss);
        }

        sb.Append("\"> ");
        sb.Append("<div class=\"drag-icon\"></div>");
        sb.Append("<div class=\"panel-icon\" onclick=\"showModal('");
        sb.Append(comp.Id);
        sb.Append("', '");
        sb.Append(comp.ButtonText);
        sb.Append("', '");
        sb.Append(comp.DesCompType);
        sb.Append("')\"></div>");
        sb.Append(comp.ButtonText);
        sb.Append("</button>");

        return sb.ToString();
    }



    public string RenderWfButtonComponent(DesCompDataWfButton comp)
    {
        StringBuilder sb = new StringBuilder();

        sb.Append($"<button id=\"{comp.Id}\" ");
        sb.Append($"data-comp-id=\"{comp.Id}\" ");
        sb.Append($"data-x=\"{comp.PosX}\" ");
        sb.Append($"data-y=\"{comp.PosY}\" ");
        sb.Append("class=\"resize-drag\" ");
        sb.Append("style=\"position: absolute; ");
        sb.AppendFormat("width:{0}; ", comp.Width);
        sb.AppendFormat("height:{0}; ", comp.Height);
        sb.AppendFormat("transform: translate({0}, {1}); ", comp.PosX, comp.PosY);

        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            sb.Append(comp.CustomCss);
        }

        sb.Append("\"> ");
        sb.Append("<div class=\"drag-icon\"></div>");
        sb.Append("<div class=\"panel-icon\" onclick=\"showModal('");
        sb.Append(comp.Id);
        sb.Append("', '");
        sb.Append(comp.ButtonText);
        sb.Append("', '");
        sb.Append(comp.DesCompType);
        sb.Append("')\"></div>");
        sb.Append(comp.ButtonText);
        sb.Append("</button>");

        return sb.ToString();
    }

    public string RenderGenericHtmlComponent(DesCompDataGenericHtml comp)
    {
        StringBuilder sb = new StringBuilder();

        sb.Append($"<div id=\"{comp.Id}\" ");
        sb.Append($"data-comp-id=\"{comp.Id}\" ");
        sb.Append($"data-x=\"{comp.PosX}\" ");
        sb.Append($"data-y=\"{comp.PosY}\" ");
        sb.Append("class=\"resize-drag\" ");
        sb.Append("style=\"position: absolute; border : 1px dotted black;");
        sb.AppendFormat("width:{0}; ", comp.Width);
        sb.AppendFormat("height:{0}; ", comp.Height);
        sb.AppendFormat("transform: translate({0}, {1}); ", comp.PosX, comp.PosY);

        if (comp.GenCompType == HtmlCompType.Image)
        {
            // Apply additional styles for background image
            sb.Append("background-image: url(");
            sb.Append(comp.BgImageUrl);
            sb.Append("); ");
            sb.Append("background-size: cover; ");
            sb.Append("background-position: center; ");
            sb.Append("background-repeat: no-repeat; ");
        }


      

        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            sb.Append(comp.CustomCss);
        }


        sb.Append("\"> ");

        if (comp.GenCompType == HtmlCompType.YoutubeVideo)
        {
            string videoId = comp.YoutubeUrl.Split("/").Last().Split("?").First();
            // Build the iframe HTML string
            sb.Append("<div style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\">");
            sb.Append($"<iframe id = {comp.Id}_frame style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;\"");
            sb.Append($"src=\"{comp.YoutubeUrl}?controls=0&mute=1&showinfo=0&rel=0&autoplay=1&loop=1&playlist={videoId}\">");
            sb.Append("</iframe>");
            sb.Append("</div>");
        }
        sb.Append($"<div id=\"{comp.Id}_text\">{comp.ButtonText}</div>");

        sb.Append("<div class=\"drag-icon\"></div>");
        sb.Append("<div class=\"panel-icon\" onclick=\"showModal('");
        sb.Append(comp.Id);
        sb.Append("', '");
        sb.Append(comp.ButtonText);
        sb.Append("', '");
        sb.Append(comp.DesCompType);
        sb.Append("')\"></div>");
        sb.Append("</div>");

        return sb.ToString();
    }


    public string RenderFrameComponent(DesCompDataFrame comp)
    {
        StringBuilder sb = new StringBuilder();

        sb.Append($"<button id=\"{comp.Id}\" ");
        sb.Append($"data-comp-id=\"{comp.Id}\" ");
        sb.Append($"data-x=\"{comp.PosX}\" ");
        sb.Append($"data-y=\"{comp.PosY}\" ");
        sb.Append("class=\"resize-drag\" ");
        sb.Append("style=\"position: absolute; ");
        sb.AppendFormat("width:{0}; ", comp.Width);
        sb.AppendFormat("height:{0}; ", comp.Height);
        sb.AppendFormat("transform: translate({0}, {1}); ", comp.PosX, comp.PosY);

        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            sb.Append(comp.CustomCss);
        }

        sb.Append("\"> ");
        sb.Append("<div class=\"drag-icon\"></div>");
        sb.Append("<div class=\"panel-icon\" onclick=\"showModal('");
        sb.Append(comp.Id);
        sb.Append("', '");
        sb.Append(comp.DesignId);
        sb.Append("', '");
        sb.Append(comp.DesCompType);
        sb.Append("')\"></div>");
        sb.Append(comp.DesignId);
        sb.Append("</button>");

        return sb.ToString();
    }



    public string RenderLangComponent(DesCompDataLang comp)
    {
        StringBuilder sb = new StringBuilder();

        sb.Append($"<button id=\"{comp.Id}\" ");
        sb.Append($"data-comp-id=\"{comp.Id}\" ");
        sb.Append($"data-x=\"{comp.PosX}\" ");
        sb.Append($"data-y=\"{comp.PosY}\" ");
        sb.Append("class=\"resize-drag\" ");
        sb.Append("style=\"position: absolute; ");
        sb.AppendFormat("width:{0}; ", comp.Width);
        sb.AppendFormat("height:{0}; ", comp.Height);
        sb.AppendFormat("transform: translate({0}, {1}); ", comp.PosX, comp.PosY);

        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            sb.Append(comp.CustomCss);
        }

        sb.Append("\"> ");
        sb.Append("<div class=\"drag-icon\"></div>");
        sb.Append("<div class=\"panel-icon\" onclick=\"showModal('");
        sb.Append(comp.Id);
        sb.Append("', '");
        sb.Append(comp.LanguageName);
        sb.Append("', '");
        sb.Append(comp.DesCompType);
        sb.Append("')\"></div>");
        sb.Append(comp.LanguageName);
        sb.Append("</button>");

        return sb.ToString();
    }
    // Add render methods for other component types here
}





          @*GuideLines*@
<div class="guide-line-y guide-line">
    <span style="opacity:0">y</span>
    <span>x</span>
</div>
<div class="guide-line-x guide-line">
    <span style="opacity:0">x</span>
    <span>x</span>
</div>