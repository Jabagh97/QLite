@using Newtonsoft.Json;
@using QLite.DesignComponents;
@model DesPageData


@{
    Layout = "_DesingerLayout.cshtml";




}

<!--begin::Container-->
<div id="kt_content_container" class="container-xxl">

    @if (Model != null && Model.Comps != null)
    {
        <div id="canvas-container" style="width: @(Model.Width ?? "800px"); height: @(Model.Height ?? "600px"); background-image: url('@(Model.BgImageUrl ?? "")'); background-size: contain; background-position: center; background-repeat: no-repeat;border: 1px solid black; margin-top: 10px;">
            @foreach (var comp in Model.Comps)
            {
                @Html.Raw(RenderComponent(comp))
            }
        </div>
        <script>

            // Initialize a JavaScript object similar to DesPageData class
            var desPageData = {
                Name: "",
                PosY: "",
                Width: "",
                Height: "",
                BgImageUrl: "",
                BackGroundColor: "",
                Comps: []
            };
            var desPageData = @Html.Raw(JsonConvert.SerializeObject(Model, new DesCompJsonConverter()));

            console.log(desPageData)
        </script>
    }
    else
    {
        <div id="canvas-container" style="border: 1px solid black; margin-top: 10px; background-color: grey; background-size: contain; background-position: center; background-repeat: no-repeat;">
        </div>

    }
</div>

<!--end::Container-->
@functions {
    public string RenderComponent(DesCompData comp)
    {
        switch (comp)
        {
            case DesCompDataText textComp:
                return RenderTextComponent(textComp);
            case DesCompDataServiceButton buttonComp:
                return RenderButtonComponent(buttonComp);

            case DesCompDataWfButton wfButtonComp:
                return RenderWfButtonComponent(wfButtonComp);

            case DesCompDataSegment segmentComp:
                return RenderSegmentComponent(segmentComp);

            case DesCompDataGenericHtml htmlComp:
                return RenderGenericHtmlComponent(htmlComp);
            case DesCompDataFrame frameComp:
                return RenderFrameComponent(frameComp);

            case DesCompDataLang langComp:
                return RenderLangComponent(langComp);
            // Add cases for other component types here
            default:
                return string.Empty; // Unknown component type
        }
    }

    public string RenderSegmentComponent(DesCompDataSegment comp)
    {
        string cssStyles = "";

        // Check if comp has CSS styles defined
        if (!string.IsNullOrEmpty(comp.CustomCss))
        {
            // Append the custom CSS styles to the existing style attribute
            cssStyles = comp.CustomCss;
        }

        return $"<button id=\"{comp.Id}\" data-comp-id=\"{comp.Id}\" data-x=\"{comp.PosX}\" data-y=\"{comp.PosY}\" class=\"resize-drag\" style=\"position: absolute; width:{comp.Width}; height:{comp.Height};  transform: translate({comp.PosX}, {comp.PosY}); {cssStyles}\"> <div class=\"drag-icon\"></div><div class=\"panel-icon\" onclick=\"showModal('{comp.Id}')\"></div>{comp.ButtonText}</button>";
    }


    public string RenderTextComponent(DesCompDataText comp)
    {
        return $"<div style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\">{comp.Text}</div>";
    }

    public string RenderButtonComponent(DesCompDataServiceButton comp)
    {
        return $"<button style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\">{comp.ButtonText}</button>";
    }

    public string RenderSelectionComponent(DesCompDataServiceSelection comp)
    {
        // Implement rendering for DesCompDataServiceSelection
        return $"<select style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\"><option value=\"option1\">Option 1</option><option value=\"option2\">Option 2</option></select>";
    }

    public string RenderWfButtonComponent(DesCompDataWfButton comp)
    {
        string buttonText = comp.ButtonText;
        string buttonType = comp.BtnType.ToString().ToLower();
        return $"<button style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\" type=\"{buttonType}\">{buttonText}</button>";
    }

    public string RenderGenericHtmlComponent(DesCompDataGenericHtml comp)
    {
        // Implement rendering for DesCompDataGenericHtml
        if (!string.IsNullOrEmpty(comp.fileURL))
        {
            if (comp.fileURL.EndsWith(".mp4") || comp.fileURL.EndsWith(".avi") || comp.fileURL.EndsWith(".webm"))
            {
                return $"<video style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\" controls><source src=\"{comp.fileURL}\" type=\"video/mp4\"></video>";
            }
            else if (comp.fileURL.EndsWith(".png") || comp.fileURL.EndsWith(".jpg") || comp.fileURL.EndsWith(".jpeg") || comp.fileURL.EndsWith(".gif"))
            {
                return $"<img style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\" src=\"{comp.fileURL}\" alt=\"Image\">";
            }
            else
            {
                return $"<a style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\" href=\"{comp.fileURL}\" target=\"_blank\">Open file</a>";
            }
        }
        else if (!string.IsNullOrEmpty(comp.YoutubeUrl))
        {
            return $"<iframe style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\" width=\"560\" height=\"315\" src=\"{comp.YoutubeUrl}\" frameborder=\"0\" allowfullscreen></iframe>";
        }
        else
        {
            return $"<div style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\">No content available</div>";
        }
    }

    public string RenderFrameComponent(DesCompDataFrame comp)
    {
        // Implement rendering for DesCompDataFrame
        string designId = comp.DesignId;
        string animation = comp.SlideAnimation ? "slide" : "none";
        return $"<iframe style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\" src=\"/Designer?DesignID={designId}\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>";
    }


    public string RenderLangComponent(DesCompDataLang comp)
    {
        // Implement rendering for DesCompDataLang
        string logoUrl = comp.LogoURL;
        string languageName = comp.LanguageName;
        return $"<div style=\"position: absolute; top: {comp.PosY}px; left: {comp.PosX}px;\"><img src=\"{logoUrl}\" alt=\"{languageName}\" title=\"{languageName}\"></div>";
    }

    // Add render methods for other component types here
}



<script src="~/js/DragAndDrop.js"></script>

<script>
    dragAndDrop('resize-drag');
    function showModal(compId) {
        // Find the component with the given ID
        var component = desPageData.Comps.find(comp => comp.Id === compId);

        // Check if the component is found
        if (component) {
            // Populate the modal fields with the component's properties

            $('#buttonText').val(component.ButtonText);
            $('#segmentID').val(component.SegmentID);
            $('#cssCustom').val(component.CustomCss);
            $('#localized').prop('checked', component.Localized);
            $('#bounce').prop('checked', component.Bounce);
            $('#compID').val(compId);

            // Show the modal
            $('#segmentModal').modal('show');
            // Handle delete button click
            $('#deleteButton').click(function () {
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'You will not be able to recover this component!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Remove the component from desPageData.Comps
                        desPageData.Comps = desPageData.Comps.filter(comp => comp.Id !== compId);

                        // Remove the HTML element associated with the component
                        $('#' + compId).remove();



                        Swal.fire(
                            'Deleted!',
                            'The component has been deleted.',
                            'success'
                        );

                        // Close the modal
                        $('#segmentModal').modal('hide');
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        Swal.fire(
                            'Cancelled',
                            'Your component is safe :)',
                            'error'
                        );
                    }
                });
            });
        } else {
            console.log('Component not found for ID:', compId);
        }

    }
</script>



<script src="~/js/Designer.js"></script>



          @*GuideLines*@
<div class="guide-line-y guide-line">
    <span style="opacity:0">y</span>
    <span>x</span>
</div>
<div class="guide-line-x guide-line">
    <span style="opacity:0">x</span>
    <span>x</span>
</div>