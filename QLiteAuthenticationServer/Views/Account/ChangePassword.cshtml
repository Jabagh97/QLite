@model AccountSetupModel

<div style="width:40%;">

    <h1 class="fs-2qx" style="margin-bottom: 5rem;">Change Password</h1>

    <div>
        <form method="post" asp-controller="Account" asp-action="PerformPasswordChange" id="pwChangeForm" enctype="multipart/form-data">

            <div class="form-group">
                <label asp-for="NewPassword" class="control-label"></label> <span style="color:red;">*</span>
                <input type="password" asp-for="NewPassword" class="form-control" />
            </div>

            <div class="form-group">
                <label asp-for="ConfirmNewPassword" class="control-label"></label> <span style="color:red;">*</span>
                <input type="password" asp-for="ConfirmNewPassword" class="form-control" />
            </div>

            <input type="hidden" name="PasswordChangeToken" asp-for="PasswordChangeToken" />
            <input type="hidden" name="UserId" asp-for="UserId" />

        </form>

        <div class="modal-footer">
            <button type="button" style="width: 10rem;" class="btn btn-primary" id="submitButton">Submit</button>
        </div>
    </div>

    <div id="errorContainer" style="color:red; background-color: #ffedf0; border-radius: 0.25rem;"></div>


    @* password requirements card *@
@*     <div class="card shadow-sm" style="margin-top: 8rem; background-color: #ffe29d; ">
        <div class="card-body">
            <h5 class="card-title">Password requirements</h5>
            <p class="card-text">
                <ul>
                    <li>Must be at least 6 characters</li>
                    <li>Must have at least one non alphanumeric character</li>
                    <li>Must have at least one digit ('0'-'9')</li>
                    <li>Must have at least one uppercase ('A'-'Z')</li>
                </ul>
            </p>
        </div>
    </div> *@

</div>


<script>

    // password strength checking
    var pwInput = document.getElementById('NewPassword');
    var confirmPwInput = document.getElementById('ConfirmNewPassword');
    var errorContainer = document.getElementById('errorContainer');

    pwInput.addEventListener('input', handlePwInputChange);
    confirmPwInput.addEventListener('input', handlePwInputChange);

    function handlePwInputChange() {
        var password = pwInput.value;
        var confirmPw = confirmPwInput.value;
        var errors = [];

        if (password == '') {
            errorContainer.innerHTML = '';
            return;
        }

        if (password.length < 6) {
            errors.push("Password must be at least 6 characters.");
        }
        if (!/[0-9]/.test(password)) {
            errors.push("Password must have at least one digit ('0'-'9').");
        }
        if (!/[A-Z]/.test(password)) {
            errors.push("Password must have at least one uppercase letter ('A'-'Z').");
        }
        if (!/[^A-Za-z0-9]/.test(password)) {
            errors.push("Password must have at least one non-alphanumeric character.");
        }
        if (password !== confirmPw) {
            errors.push("Passwords must match.");
        }

        errorContainer.innerHTML = errors.join('<br>');
    }


    // When the "Save Changes" button is clicked, send an AJAX request
    document.getElementById("submitButton").addEventListener("click", function () {
        // Serialize the form data
        var formData = new FormData(document.getElementById("pwChangeForm"));

        // Send an AJAX POST request
        $.ajax({
            type: "POST",
            url: $("#pwChangeForm").attr("action"),
            data: formData,
            processData: false, // Don't process the data
            contentType: false, // Don't set content type
            beforeSend: function (xhr) {
                KTApp.showPageLoading();
            },
            success: function (response) {

                if (response.success === false) {

                    // if there is stuff in error list, problem is probably validation error
                    // otherwise, an internal error happened (e.g., num of rows affected was 0)

                    if (response.error == null) {
                        // show failure message
                        Swal.fire({
                            icon: 'error',
                            title: 'An unexpected error happened',
                            showConfirmButton: false,
                            timer: 2000
                        })
                    }
                    else {
                        // display validation errors
                        var errorMessage = response.error;
                        $('#errorContainer').html(errorMessage);
                    }

                    KTApp.hidePageLoading();
                }
                else {
                    // if response is success
                    KTApp.hidePageLoading();
                    window.location.href = "/Account/PasswordChanged";
                }

            },
            error: function (error) {

                $('#editModal').modal('hide'); // hide the edit modal
                $('#table').DataTable().ajax.reload(); // reload the grid

                // show error message
                Swal.fire({
                    icon: 'error',
                    title: 'An unexpected error occured: ' + error
                })

                KTApp.hidePageLoading();
            }
        });
    });
</script>