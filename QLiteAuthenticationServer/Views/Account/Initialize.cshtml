@model AccountSetupModel


<div id="myContainer" style="display: flex;">

    @* left side *@
    <div style="@(Model.QRless ? "width:35%;" : "width:30%;")"> @* qr okutturulmayacaksa sol taraf daha genis olsun *@

        <h1 class="fs-2qx" style="margin-bottom: 5rem;">Account Initialization</h1>


        @* form *@
        <div>
            <form method="post" asp-controller="Account" asp-action="PerformInitialization" id="form" enctype="multipart/form-data">

                <div class="form-group">
                    <label asp-for="NewPassword" class="control-label"></label> <span style="color:red;">*</span>
                    <input type="password" asp-for="NewPassword" class="form-control" />
                </div>

                <div class="form-group">
                    <label asp-for="ConfirmNewPassword" class="control-label"></label> <span style="color:red;">*</span>
                    <input type="password" asp-for="ConfirmNewPassword" class="form-control" />
                </div>

                @if (!Model.QRless)
                {
                    <div class="form-group">
                        <label asp-for="OTP" class="control-label">OTP Code</label> <span style="color:red;">*</span>
                        <input type="text" asp-for="OTP" class="form-control" id="otpInput" style="color: #8f8f8f; font-size: 1.5em; height: 43.56px; line-height: 0.5;" />
                    </div>

                    <span class="text-muted">Scan the QR code for this</span>
                }

                <input type="hidden" name="PasswordChangeToken" asp-for="PasswordChangeToken" />
                <input type="hidden" name="UserId" asp-for="UserId" />

            </form>

            <div class="modal-footer">
                <button style="width: 10rem;" type="button" class="btn btn-primary" id="submitButton">Submit</button>
            </div>

        </div>

        <div id="errorContainer" style="color:red; background-color: #ffedf0; border-radius: 0.25rem; margin-top: 4rem;"></div>


        @* password requirements card *@
@*         <div class="card shadow-sm" style="margin-top: 8rem; background-color: #ffe29d; ">
            <div class="card-body">
                <h5 class="card-title">Password requirements</h5>
                <p class="card-text">
                    <ul>
                        <li>Must be at least 6 characters</li>
                        <li>Must have at least one non alphanumeric character</li>
                        <li>Must have at least one digit ('0'-'9')</li>
                        <li>Must have at least one uppercase ('A'-'Z')</li>
                    </ul>
                </p>
            </div>
        </div> *@

    </div>

    @if(!Model.QRless)
    {
        @* right side *@
        <div class="card card-body shadow-sm" style="max-width: 35% !important; margin-left: 8rem; margin-top: 5rem; height: 45rem;">
            <h1 style="margin-top: 0.5rem; margin-bottom: 1rem; font-size: large;"> Scan QR Code for 2FA Setup: </h1>
            <img alt="QR Code for OTP" src="@Model.EncodedQR" style="width: 100%;" />
            @* <div id="otpCheck" style="width:100%; text-align:center;"></div> *@
            <div class="text-muted" style="width:100%; text-align:center; margin-top: 1rem; padding: 0 1rem;">
                You may choose any 2FA app you prefer, including <span style="font-style: italic;"> Google Authenticator </span>, <span style="font-style: italic;"> Microsoft Authenticator</span>, <span style="font-style: italic;">Authy</span>, <span style="font-style: italic;">FreeOTP</span>, and more..
            </div>
        </div>
    }

</div>


<script>

    // OTP code input limiting
    var otpInput = document.getElementById('otpInput');
    if (otpInput) {
        otpInput.addEventListener('input', function () {
            this.value = this.value.replace(/[^0-9]/g, '').substring(0, 6);
        });
    }


    // password strength checking
    var pwInput = document.getElementById('NewPassword');
    var confirmPwInput = document.getElementById('ConfirmNewPassword');
    var errorContainer = document.getElementById('errorContainer');

    pwInput.addEventListener('input', handlePwInputChange);
    confirmPwInput.addEventListener('input', handlePwInputChange);

    function handlePwInputChange() {
        var password = pwInput.value;
        var confirmPw = confirmPwInput.value;
        var errors = [];

        if (password == '') {
            errorContainer.innerHTML = '';
            return;
        }

        if (password.length < 6) {
            errors.push("Password must be at least 6 characters.");
        }
        if (!/[0-9]/.test(password)) {
            errors.push("Password must have at least one digit ('0'-'9').");
        }
        if (!/[A-Z]/.test(password)) {
            errors.push("Password must have at least one uppercase letter ('A'-'Z').");
        }
        if (!/[^A-Za-z0-9]/.test(password)) {
            errors.push("Password must have at least one non-alphanumeric character.");
        }
        if (password !== confirmPw) {
            errors.push("Passwords must match.");
        }

        errorContainer.innerHTML = errors.join('<br>');
    }


    // When the "Save Changes" button is clicked, send an AJAX request
    document.getElementById("submitButton").addEventListener("click", function () {
        // Serialize the form data
        var formData = new FormData(document.getElementById("form"));

        // Send an AJAX POST request
        $.ajax({
            type: "POST",
            url: $("#form").attr("action"),
            data: formData,
            processData: false, // Don't process the data
            contentType: false, // Don't set content type
            beforeSend: function (xhr) {
                KTApp.showPageLoading();
            },
            success: function (response) {

                if (response.success === false) {

                    // if there is stuff in error list, problem is probably validation error
                    // otherwise, an internal error happened (e.g., num of rows affected was 0)

                    if (response.error == null) {
                        // show failure message
                        Swal.fire({
                            icon: 'error',
                            title: 'An unexpected error happened',
                            showConfirmButton: false,
                            timer: 2000
                        })
                    }
                    else {
                        // display validation errors
                        var errorMessage = response.error;
                        $('#errorContainer').html(errorMessage);
                    }

                    KTApp.hidePageLoading();
                }
                else {
                    // if response is success
                    KTApp.hidePageLoading();
                    window.location.href = "/Account/AccountInitialized";
                }

            },
            error: function (error) {

                $('#editModal').modal('hide'); // hide the edit modal
                $('#table').DataTable().ajax.reload(); // reload the grid

                // show error message
                Swal.fire({
                    icon: 'error',
                    title: 'An unexpected error occured: ' + error
                })

                KTApp.hidePageLoading();
            }
        });
    });
</script>