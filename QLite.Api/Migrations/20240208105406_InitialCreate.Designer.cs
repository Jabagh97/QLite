// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLiteDataApi.Context;

#nullable disable

namespace QLiteDataApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240208105406_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("QLite.Data.Account", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<byte[]>("LogoS")
                        .HasColumnType("BLOB");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Account");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("QLite.Data.AccountLanguage", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_AccountLanguage");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_AccountLanguage");

                    b.HasIndex(new[] { "Language" }, "iLanguage_AccountLanguage");

                    b.ToTable("AccountLanguage", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Branch", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Province")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubProvince")
                        .HasColumnType("TEXT");

                    b.Property<string>("Terminal")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TicketPoolProfile")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Branch");

                    b.HasIndex(new[] { "Country" }, "iCountry_Branch");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Branch");

                    b.HasIndex(new[] { "Province" }, "iProvince_Branch");

                    b.HasIndex(new[] { "SubProvince" }, "iSubProvince_Branch");

                    b.HasIndex(new[] { "TicketPoolProfile" }, "iTicketPoolProfile_Branch");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Country", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("LangCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("BLOB");

                    b.Property<string>("Mask")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Sequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Country");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Design", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignData")
                        .HasColumnType("TEXT");

                    b.Property<string>("DesignTag")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplicationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WfStep")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Design");

                    b.ToTable("Design", (string)null);
                });

            modelBuilder.Entity("QLite.Data.DesignTarget", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Design")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Design" }, "iDesign_DesignTarget");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DesignTarget");

                    b.ToTable("DesignTarget", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Desk", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActiveUser")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActivityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Autocall")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrentTicketNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayNo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<DateTime?>("LastStateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Pano")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_Desk");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Desk");

                    b.HasIndex(new[] { "Pano" }, "iPano_Desk");

                    b.ToTable("Desk", (string)null);
                });

            modelBuilder.Entity("QLite.Data.DeskCreatableService", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_DeskCreatableServices");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskCreatableServices");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskCreatableServices");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_DeskCreatableServices");

                    b.ToTable("DeskCreatableServices");
                });

            modelBuilder.Entity("QLite.Data.DeskMacroSchedule", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("D1")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("D2")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("D3")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("D4")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("D5")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("D6")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("D7")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("HaftalikRutin")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Macro")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Pasif")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_DeskMacroSchedule");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskMacroSchedule");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskMacroSchedule");

                    b.HasIndex(new[] { "Macro" }, "iMacro_DeskMacroSchedule");

                    b.HasIndex(new[] { "User" }, "iUser_DeskMacroSchedule");

                    b.ToTable("DeskMacroSchedule", (string)null);
                });

            modelBuilder.Entity("QLite.Data.DeskStatus", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeskActivityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StateEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StateStartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskStatus");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskStatus");

                    b.HasIndex(new[] { "User" }, "iUser_DeskStatus");

                    b.ToTable("DeskStatus", (string)null);
                });

            modelBuilder.Entity("QLite.Data.DeskTransferableService", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_DeskTransferableServices");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskTransferableServices");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskTransferableServices");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_DeskTransferableServices");

                    b.ToTable("DeskTransferableServices");
                });

            modelBuilder.Entity("QLite.Data.KappRelation", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Child")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("BLOB");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Child" }, "iChild_KappRelation");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappRelation");

                    b.HasIndex(new[] { "Parent" }, "iParent_KappRelation");

                    b.ToTable("KappRelation", (string)null);
                });

            modelBuilder.Entity("QLite.Data.KappSessionStep", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KappSession")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Step")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubStep")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappSessionStep");

                    b.ToTable("KappSessionStep", (string)null);
                });

            modelBuilder.Entity("QLite.Data.KappSetting", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CacheTimeout")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameter")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterValue")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_KappSettings");

                    b.HasIndex(new[] { "Branch" }, "iBranch_KappSettings");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappSettings");

                    b.HasIndex(new[] { "KioskApplication" }, "iKioskApplication_KappSettings");

                    b.ToTable("KappSettings");
                });

            modelBuilder.Entity("QLite.Data.KappWorkflow", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignData")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RestartProfile")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionType")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappWorkflow");

                    b.ToTable("KappWorkflow", (string)null);
                });

            modelBuilder.Entity("QLite.Data.KioskApplication", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignTag")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("HasDigitalDisplay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HwId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("KappName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("KappWorkflow")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("KioskApplicationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlatformAuthClientId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PlatformAuthClientSecret")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_KioskApplication");

                    b.HasIndex(new[] { "Branch" }, "iBranch_KioskApplication");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KioskApplication");

                    b.HasIndex(new[] { "KappWorkflow" }, "iKappWorkflow_KioskApplication");

                    b.HasIndex(new[] { "KioskApplicationType" }, "iKioskApplicationType_KioskApplication");

                    b.ToTable("KioskApplication", (string)null);
                });

            modelBuilder.Entity("QLite.Data.KioskApplicationType", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QorchAppType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_KioskApplicationType");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KioskApplicationType");

                    b.ToTable("KioskApplicationType", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Language", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CultureInfo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LangCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("BLOB");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Language");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Macro", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("MacroType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxWaitingTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToThisDesk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Macro");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Macro");

                    b.ToTable("Macro", (string)null);
                });

            modelBuilder.Entity("QLite.Data.MacroRule", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("Macro")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxWaitingTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinWaitingTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ToThisDesk")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Transfer")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_MacroRule");

                    b.HasIndex(new[] { "Macro" }, "iMacro_MacroRule");

                    b.HasIndex(new[] { "Segment" }, "iSegment_MacroRule");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_MacroRule");

                    b.ToTable("MacroRule", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Province", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Country" }, "iCountry_Province");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Province");

                    b.ToTable("Province", (string)null);
                });

            modelBuilder.Entity("QLite.Data.QorchSession", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentStep")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Error")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("InputInfo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("InputType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("InputValue")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Workflow")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_QorchSession");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_QorchSession");

                    b.HasIndex(new[] { "KioskApplication" }, "iKioskApplication_QorchSession");

                    b.HasIndex(new[] { "Segment" }, "iSegment_QorchSession");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_QorchSession");

                    b.ToTable("QorchSession", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Resource", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameter")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Resource");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Resource");

                    b.HasIndex(new[] { "Language" }, "iLanguage_Resource");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("QLite.Data.RestartProfile", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RestartPerNumOfDays")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RestartPerNumOfSession")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RestartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_RestartProfile");

                    b.ToTable("RestartProfile", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Segment", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Default")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsParent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Segment");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Segment");

                    b.HasIndex(new[] { "Parent" }, "iParent_Segment");

                    b.ToTable("Segment", (string)null);
                });

            modelBuilder.Entity("QLite.Data.ServiceType", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("CallInKiosk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Default")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("GenTicketByDesk")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("BLOB");

                    b.Property<bool?>("IsParent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SeqNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_ServiceType");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_ServiceType");

                    b.HasIndex(new[] { "Parent" }, "iParent_ServiceType");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("QLite.Data.SubProvince", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Province")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Country" }, "iCountry_SubProvince");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_SubProvince");

                    b.HasIndex(new[] { "Province" }, "iProvince_SubProvince");

                    b.ToTable("SubProvince", (string)null);
                });

            modelBuilder.Entity("QLite.Data.Ticket", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedByDesk")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedByKiosk")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CurrentDesk")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrentState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerInfo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerNo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DayOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("LangCode")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastOpr")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastOprTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("TEXT");

                    b.Property<string>("SegmentName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TicketNote")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TicketPool")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ToDesk")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ToServiceType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_Ticket");

                    b.HasIndex(new[] { "CurrentDesk" }, "iCurrentDesk_Ticket");

                    b.HasIndex(new[] { "Desk" }, "iDesk_Ticket");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Ticket");

                    b.HasIndex(new[] { "Segment" }, "iSegment_Ticket");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_Ticket");

                    b.HasIndex(new[] { "ToDesk" }, "iToDesk_Ticket");

                    b.HasIndex(new[] { "ToServiceType" }, "iToServiceType_Ticket");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("QLite.Data.TicketPool", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BreakEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BreakStartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CopyNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxWaitingTicketCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MaxWaitingTicketCountControlTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("NotAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RangeEnd")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RangeStart")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ResetOnRange")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ServiceEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ServiceStartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TicketPoolProfile")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_TicketPool");

                    b.HasIndex(new[] { "Branch" }, "iBranch_TicketPool");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_TicketPool");

                    b.HasIndex(new[] { "KioskApplication" }, "iKioskApplication_TicketPool");

                    b.HasIndex(new[] { "Segment" }, "iSegment_TicketPool");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_TicketPool");

                    b.HasIndex(new[] { "TicketPoolProfile" }, "iTicketPoolProfile_TicketPool");

                    b.ToTable("TicketPool", (string)null);
                });

            modelBuilder.Entity("QLite.Data.TicketPoolProfile", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_TicketPoolProfile");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_TicketPoolProfile");

                    b.ToTable("TicketPoolProfile", (string)null);
                });

            modelBuilder.Entity("QLite.Data.TicketState", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("CallingRuleDescription")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeskAppType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskAppId")
                        .HasColumnType("TEXT")
                        .HasColumnName("KioskAppID");

                    b.Property<Guid?>("Macro")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("TEXT");

                    b.Property<string>("SegmentName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Ticket")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TicketCallType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketOprValue")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketStateValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_TicketState");

                    b.HasIndex(new[] { "Desk" }, "iDesk_TicketState");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_TicketState");

                    b.HasIndex(new[] { "Segment" }, "iSegment_TicketState");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_TicketState");

                    b.HasIndex(new[] { "Ticket" }, "iTicket_TicketState");

                    b.ToTable("TicketState", (string)null);
                });

            modelBuilder.Entity("QLite.Data.UploadBo", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_UploadBO");

                    b.ToTable("UploadBO", (string)null);
                });

            modelBuilder.Entity("QLite.Data.AccountLanguage", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("AccountLanguages")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_AccountLanguage_Account");

                    b.HasOne("QLite.Data.Language", "LanguageNavigation")
                        .WithMany("AccountLanguages")
                        .HasForeignKey("Language")
                        .HasConstraintName("FK_AccountLanguage_Language");

                    b.Navigation("AccountNavigation");

                    b.Navigation("LanguageNavigation");
                });

            modelBuilder.Entity("QLite.Data.Branch", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Branch_Account");

                    b.HasOne("QLite.Data.Country", "CountryNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Branch_Country");

                    b.HasOne("QLite.Data.Province", "ProvinceNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Province")
                        .HasConstraintName("FK_Branch_Province");

                    b.HasOne("QLite.Data.SubProvince", "SubProvinceNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("SubProvince")
                        .HasConstraintName("FK_Branch_SubProvince");

                    b.HasOne("QLite.Data.TicketPoolProfile", "TicketPoolProfileNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("TicketPoolProfile")
                        .HasConstraintName("FK_Branch_TicketPoolProfile");

                    b.Navigation("AccountNavigation");

                    b.Navigation("CountryNavigation");

                    b.Navigation("ProvinceNavigation");

                    b.Navigation("SubProvinceNavigation");

                    b.Navigation("TicketPoolProfileNavigation");
                });

            modelBuilder.Entity("QLite.Data.DesignTarget", b =>
                {
                    b.HasOne("QLite.Data.Design", "DesignNavigation")
                        .WithMany("DesignTargets")
                        .HasForeignKey("Design")
                        .HasConstraintName("FK_DesignTarget_Design");

                    b.Navigation("DesignNavigation");
                });

            modelBuilder.Entity("QLite.Data.Desk", b =>
                {
                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("Desks")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_Desk_Branch");

                    b.HasOne("QLite.Data.KioskApplication", "PanoNavigation")
                        .WithMany("Desks")
                        .HasForeignKey("Pano")
                        .HasConstraintName("FK_Desk_Pano");

                    b.Navigation("BranchNavigation");

                    b.Navigation("PanoNavigation");
                });

            modelBuilder.Entity("QLite.Data.DeskCreatableService", b =>
                {
                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("DeskCreatableServices")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_DeskCreatableServices_Branch");

                    b.HasOne("QLite.Data.Desk", "DeskNavigation")
                        .WithMany("DeskCreatableServices")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_DeskCreatableServices_Desk");

                    b.HasOne("QLite.Data.ServiceType", "ServiceTypeNavigation")
                        .WithMany("DeskCreatableServices")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_DeskCreatableServices_ServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("QLite.Data.DeskMacroSchedule", b =>
                {
                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("DeskMacroSchedules")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_DeskMacroSchedule_Branch");

                    b.HasOne("QLite.Data.Desk", "DeskNavigation")
                        .WithMany("DeskMacroSchedules")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_DeskMacroSchedule_Desk");

                    b.HasOne("QLite.Data.Macro", "MacroNavigation")
                        .WithMany("DeskMacroSchedules")
                        .HasForeignKey("Macro")
                        .HasConstraintName("FK_DeskMacroSchedule_Macro");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("MacroNavigation");
                });

            modelBuilder.Entity("QLite.Data.DeskTransferableService", b =>
                {
                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("DeskTransferableServices")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_DeskTransferableServices_Branch");

                    b.HasOne("QLite.Data.Desk", "DeskNavigation")
                        .WithMany("DeskTransferableServices")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_DeskTransferableServices_Desk");

                    b.HasOne("QLite.Data.ServiceType", "ServiceTypeNavigation")
                        .WithMany("DeskTransferableServices")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_DeskTransferableServices_ServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("QLite.Data.KappRelation", b =>
                {
                    b.HasOne("QLite.Data.KioskApplication", "ChildNavigation")
                        .WithMany("KappRelationChildNavigations")
                        .HasForeignKey("Child")
                        .HasConstraintName("FK_KappRelation_Child");

                    b.HasOne("QLite.Data.KioskApplication", "ParentNavigation")
                        .WithMany("KappRelationParentNavigations")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_KappRelation_Parent");

                    b.Navigation("ChildNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("QLite.Data.KappSetting", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("KappSettings")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_KappSettings_Account");

                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("KappSettings")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_KappSettings_Branch");

                    b.HasOne("QLite.Data.KioskApplication", "KioskApplicationNavigation")
                        .WithMany("KappSettings")
                        .HasForeignKey("KioskApplication")
                        .HasConstraintName("FK_KappSettings_KioskApplication");

                    b.Navigation("AccountNavigation");

                    b.Navigation("BranchNavigation");

                    b.Navigation("KioskApplicationNavigation");
                });

            modelBuilder.Entity("QLite.Data.KioskApplication", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_KioskApplication_Account");

                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_KioskApplication_Branch");

                    b.HasOne("QLite.Data.KappWorkflow", "KappWorkflowNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("KappWorkflow")
                        .HasConstraintName("FK_KioskApplication_KappWorkflow");

                    b.HasOne("QLite.Data.KioskApplicationType", "KioskApplicationTypeNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("KioskApplicationType")
                        .HasConstraintName("FK_KioskApplication_KioskApplicationType");

                    b.Navigation("AccountNavigation");

                    b.Navigation("BranchNavigation");

                    b.Navigation("KappWorkflowNavigation");

                    b.Navigation("KioskApplicationTypeNavigation");
                });

            modelBuilder.Entity("QLite.Data.KioskApplicationType", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("KioskApplicationTypes")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_KioskApplicationType_Account");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("QLite.Data.Macro", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("Macros")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Macro_Account");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("QLite.Data.MacroRule", b =>
                {
                    b.HasOne("QLite.Data.Macro", "MacroNavigation")
                        .WithMany("MacroRules")
                        .HasForeignKey("Macro")
                        .HasConstraintName("FK_MacroRule_Macro");

                    b.HasOne("QLite.Data.Segment", "SegmentNavigation")
                        .WithMany("MacroRules")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_MacroRule_Segment");

                    b.HasOne("QLite.Data.ServiceType", "ServiceTypeNavigation")
                        .WithMany("MacroRules")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_MacroRule_ServiceType");

                    b.Navigation("MacroNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("QLite.Data.Province", b =>
                {
                    b.HasOne("QLite.Data.Country", "CountryNavigation")
                        .WithMany("Provinces")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Province_Country");

                    b.Navigation("CountryNavigation");
                });

            modelBuilder.Entity("QLite.Data.QorchSession", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_QorchSession_Account");

                    b.HasOne("QLite.Data.KioskApplication", "KioskApplicationNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("KioskApplication")
                        .HasConstraintName("FK_QorchSession_KioskApplication");

                    b.HasOne("QLite.Data.Segment", "SegmentNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_QorchSession_Segment");

                    b.HasOne("QLite.Data.ServiceType", "ServiceTypeNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_QorchSession_ServiceType");

                    b.Navigation("AccountNavigation");

                    b.Navigation("KioskApplicationNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("QLite.Data.Resource", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("Resources")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Resource_Account");

                    b.HasOne("QLite.Data.Language", "LanguageNavigation")
                        .WithMany("Resources")
                        .HasForeignKey("Language")
                        .HasConstraintName("FK_Resource_Language");

                    b.Navigation("AccountNavigation");

                    b.Navigation("LanguageNavigation");
                });

            modelBuilder.Entity("QLite.Data.Segment", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("Segments")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Segment_Account");

                    b.HasOne("QLite.Data.Segment", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_Segment_Parent");

                    b.Navigation("AccountNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("QLite.Data.ServiceType", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_ServiceType_Account");

                    b.HasOne("QLite.Data.ServiceType", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_ServiceType_Parent");

                    b.Navigation("AccountNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("QLite.Data.SubProvince", b =>
                {
                    b.HasOne("QLite.Data.Country", "CountryNavigation")
                        .WithMany("SubProvinces")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_SubProvince_Country");

                    b.HasOne("QLite.Data.Province", "ProvinceNavigation")
                        .WithMany("SubProvinces")
                        .HasForeignKey("Province")
                        .HasConstraintName("FK_SubProvince_Province");

                    b.Navigation("CountryNavigation");

                    b.Navigation("ProvinceNavigation");
                });

            modelBuilder.Entity("QLite.Data.Ticket", b =>
                {
                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_Ticket_Branch");

                    b.HasOne("QLite.Data.Desk", "CurrentDeskNavigation")
                        .WithMany("TicketCurrentDeskNavigations")
                        .HasForeignKey("CurrentDesk")
                        .HasConstraintName("FK_Ticket_CurrentDesk");

                    b.HasOne("QLite.Data.Desk", "DeskNavigation")
                        .WithMany("TicketDeskNavigations")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_Ticket_Desk");

                    b.HasOne("QLite.Data.Segment", "SegmentNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_Ticket_Segment");

                    b.HasOne("QLite.Data.ServiceType", "ServiceTypeNavigation")
                        .WithMany("TicketServiceTypeNavigations")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_Ticket_ServiceType");

                    b.HasOne("QLite.Data.Desk", "ToDeskNavigation")
                        .WithMany("TicketToDeskNavigations")
                        .HasForeignKey("ToDesk")
                        .HasConstraintName("FK_Ticket_ToDesk");

                    b.HasOne("QLite.Data.ServiceType", "ToServiceTypeNavigation")
                        .WithMany("TicketToServiceTypeNavigations")
                        .HasForeignKey("ToServiceType")
                        .HasConstraintName("FK_Ticket_ToServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("CurrentDeskNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");

                    b.Navigation("ToDeskNavigation");

                    b.Navigation("ToServiceTypeNavigation");
                });

            modelBuilder.Entity("QLite.Data.TicketPool", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_TicketPool_Account");

                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_TicketPool_Branch");

                    b.HasOne("QLite.Data.KioskApplication", "KioskApplicationNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("KioskApplication")
                        .HasConstraintName("FK_TicketPool_KioskApplication");

                    b.HasOne("QLite.Data.Segment", "SegmentNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_TicketPool_Segment");

                    b.HasOne("QLite.Data.ServiceType", "ServiceTypeNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_TicketPool_ServiceType");

                    b.HasOne("QLite.Data.TicketPoolProfile", "TicketPoolProfileNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("TicketPoolProfile")
                        .HasConstraintName("FK_TicketPool_TicketPoolProfile");

                    b.Navigation("AccountNavigation");

                    b.Navigation("BranchNavigation");

                    b.Navigation("KioskApplicationNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");

                    b.Navigation("TicketPoolProfileNavigation");
                });

            modelBuilder.Entity("QLite.Data.TicketPoolProfile", b =>
                {
                    b.HasOne("QLite.Data.Account", "AccountNavigation")
                        .WithMany("TicketPoolProfiles")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_TicketPoolProfile_Account");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("QLite.Data.TicketState", b =>
                {
                    b.HasOne("QLite.Data.Branch", "BranchNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_TicketState_Branch");

                    b.HasOne("QLite.Data.Desk", "DeskNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_TicketState_Desk");

                    b.HasOne("QLite.Data.Segment", "SegmentNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_TicketState_Segment");

                    b.HasOne("QLite.Data.ServiceType", "ServiceTypeNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_TicketState_ServiceType");

                    b.HasOne("QLite.Data.Ticket", "TicketNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Ticket")
                        .HasConstraintName("FK_TicketState_Ticket");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");

                    b.Navigation("TicketNavigation");
                });

            modelBuilder.Entity("QLite.Data.Account", b =>
                {
                    b.Navigation("AccountLanguages");

                    b.Navigation("Branches");

                    b.Navigation("KappSettings");

                    b.Navigation("KioskApplicationTypes");

                    b.Navigation("KioskApplications");

                    b.Navigation("Macros");

                    b.Navigation("QorchSessions");

                    b.Navigation("Resources");

                    b.Navigation("Segments");

                    b.Navigation("ServiceTypes");

                    b.Navigation("TicketPoolProfiles");

                    b.Navigation("TicketPools");
                });

            modelBuilder.Entity("QLite.Data.Branch", b =>
                {
                    b.Navigation("DeskCreatableServices");

                    b.Navigation("DeskMacroSchedules");

                    b.Navigation("DeskTransferableServices");

                    b.Navigation("Desks");

                    b.Navigation("KappSettings");

                    b.Navigation("KioskApplications");

                    b.Navigation("TicketPools");

                    b.Navigation("TicketStates");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("QLite.Data.Country", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Provinces");

                    b.Navigation("SubProvinces");
                });

            modelBuilder.Entity("QLite.Data.Design", b =>
                {
                    b.Navigation("DesignTargets");
                });

            modelBuilder.Entity("QLite.Data.Desk", b =>
                {
                    b.Navigation("DeskCreatableServices");

                    b.Navigation("DeskMacroSchedules");

                    b.Navigation("DeskTransferableServices");

                    b.Navigation("TicketCurrentDeskNavigations");

                    b.Navigation("TicketDeskNavigations");

                    b.Navigation("TicketStates");

                    b.Navigation("TicketToDeskNavigations");
                });

            modelBuilder.Entity("QLite.Data.KappWorkflow", b =>
                {
                    b.Navigation("KioskApplications");
                });

            modelBuilder.Entity("QLite.Data.KioskApplication", b =>
                {
                    b.Navigation("Desks");

                    b.Navigation("KappRelationChildNavigations");

                    b.Navigation("KappRelationParentNavigations");

                    b.Navigation("KappSettings");

                    b.Navigation("QorchSessions");

                    b.Navigation("TicketPools");
                });

            modelBuilder.Entity("QLite.Data.KioskApplicationType", b =>
                {
                    b.Navigation("KioskApplications");
                });

            modelBuilder.Entity("QLite.Data.Language", b =>
                {
                    b.Navigation("AccountLanguages");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("QLite.Data.Macro", b =>
                {
                    b.Navigation("DeskMacroSchedules");

                    b.Navigation("MacroRules");
                });

            modelBuilder.Entity("QLite.Data.Province", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("SubProvinces");
                });

            modelBuilder.Entity("QLite.Data.Segment", b =>
                {
                    b.Navigation("InverseParentNavigation");

                    b.Navigation("MacroRules");

                    b.Navigation("QorchSessions");

                    b.Navigation("TicketPools");

                    b.Navigation("TicketStates");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("QLite.Data.ServiceType", b =>
                {
                    b.Navigation("DeskCreatableServices");

                    b.Navigation("DeskTransferableServices");

                    b.Navigation("InverseParentNavigation");

                    b.Navigation("MacroRules");

                    b.Navigation("QorchSessions");

                    b.Navigation("TicketPools");

                    b.Navigation("TicketServiceTypeNavigations");

                    b.Navigation("TicketStates");

                    b.Navigation("TicketToServiceTypeNavigations");
                });

            modelBuilder.Entity("QLite.Data.SubProvince", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("QLite.Data.Ticket", b =>
                {
                    b.Navigation("TicketStates");
                });

            modelBuilder.Entity("QLite.Data.TicketPoolProfile", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("TicketPools");
                });
#pragma warning restore 612, 618
        }
    }
}
