@using KioskApp.Helpers;
@using QLite.Data.Dtos;
@using QLite.DesignComponents;
@using QLite.Data;
@using System.Text;
@using static QLite.Data.Models.Enums;
@model ServicesAndDesignModel


@if (Model.DesignData != null && Model.DesignData.Comps != null)
{

    <div id="canvas-container"
     style="
         width: @(Model.DesignData.Width ?? "100vw");
        height: @(Model.DesignData.Height ?? "100vh");
        background-image: url('@(Model.DesignData.BgImageUrl ?? "")');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        border: 1px solid black;
            ">
        @foreach (var comp in Model.DesignData.Comps)
        {
            @Html.Raw(RenderComponent(comp,Model.Services))
        }
    </div>



    <script>
        localStorage.setItem('SegmentTimeoutActive', 'false');

        // Assuming Model.DesignData.PageTimeout is in seconds, convert it to milliseconds
        var ServiceTimeoutPeriod = @Model.DesignData.PageTimeOut * 1000;

        localStorage.setItem('ServiceTimeoutActive', 'true');


        setTimeout(function () {
            if (localStorage.getItem('ServiceTimeoutActive') === 'true') {
                window.location.href = '/';
            }
        }, ServiceTimeoutPeriod);
    </script>


    
}

else
{

    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="row">
            @foreach (var service in Model.Services)
            {
                <div class="col-md-12 mb-3">
                    <div class="text-center">
                        <button class="btn btn-primary btn-lg" style="font-size: 2rem; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);" onclick="svcTypeSelected('@service.Oid')">@service.Name </button>
                    </div>
                </div>
            }
        </div>
    </div>
}


@functions {
    public string RenderComponent(DesCompData comp, List<ServiceTypeDto> services)
    {
        switch (comp)
        {
           

            case DesCompDataServiceButton buttonComp:
                return ViewHelper.RenderServiceButton(buttonComp, services);

            case DesCompDataWfButton wfButtonComp:
                return ViewHelper.RenderWfButtonComponent(wfButtonComp);


            case DesCompDataGenericHtml htmlComp:
                return ViewHelper.RenderGenericHtmlComponent(htmlComp);

            case DesCompDataLang langComp:
                return ViewHelper.RenderLanguageButton(langComp, Step.ServiceTypeSelection.ToString());

         
            default:
                return string.Empty; // Unknown component type
        }
    }

}
<script>
    async function svcTypeSelected(svcTypeId) {


        let ticket = await postHttpReq('GetTicketView', JSON.stringify({ "ServiceTypeId": svcTypeId }));

        $('#content').html(ticket);

        //loadTicketView(ticket);
    }

</script>