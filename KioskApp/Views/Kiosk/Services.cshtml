@model ServicesAndDesignModel


@if (!string.IsNullOrEmpty(Model.Message))
{
    <div class="alert alert-warning fixed-alert">@Model.Message</div>
}

@*If a Custom Design is available*@

@if (Model.DesignData != null && Model.DesignData.Comps != null)
{

    <div id="canvas-container" class="canvas-container" style="background-image: url('@(Model.DesignData.BgImageUrl ?? "")');" data-width="@Model.DesignData.Width" data-height="@Model.DesignData.Height">
        <div id="content">
            @foreach (var comp in Model.DesignData.Comps)
            {
                @Html.Raw(RenderComponent(comp, Model.Services))
            }
        </div>
        @await Html.PartialAsync("Error")
    </div>


    @if (Model.DesignData.PageTimeOut > 0)
    {
        <script>
            localStorage.setItem('SegmentTimeoutActive', 'false');

            // Assuming Model.DesignData.PageTimeout is in seconds, convert it to milliseconds
            var ServiceTimeoutPeriod = @Model.DesignData.PageTimeOut * 1000;

            localStorage.setItem('ServiceTimeoutActive', 'true');


            setTimeout(function () {
                if (localStorage.getItem('ServiceTimeoutActive') === 'true') {
                    window.location.href = '/';
                }
            }, ServiceTimeoutPeriod);
        </script>

    }

}

else
{
    <div class="service-selection-container">
        @foreach (var service in Model.Services)
        {
            <div class="text-center mb-3">
                <button class="btn btn-primary btn-lg service-btn" onclick="svcTypeSelected('@service.Oid')">@service.Name</button>
            </div>
        }
        @await Html.PartialAsync("Error")
    </div>
}


@functions {
    public string RenderComponent(DesCompData comp, List<ServiceTypeDto> services)
    {
        switch (comp)
        {


            case DesCompDataServiceButton buttonComp:
                return ViewHelper.RenderServiceButton(buttonComp, services);

            case DesCompDataWfButton wfButtonComp:
                return ViewHelper.RenderWfButtonComponent(wfButtonComp);


            case DesCompDataGenericHtml htmlComp:
                return ViewHelper.RenderGenericHtmlComponent(htmlComp);

            case DesCompDataLang langComp:
                return ViewHelper.RenderLanguageButton(langComp, Step.ServiceTypeSelection.ToString());


            default:
                return string.Empty; // Unknown component type
        }
    }

}

<script src="~/js/resizeComponents.js"></script>

<script>
    async function svcTypeSelected(svcTypeId) {


        let ticket = await postHttpReq('GetTicketView', JSON.stringify({ "ServiceTypeId": svcTypeId }));

        $('#content').html(ticket);

        //loadTicketView(ticket);
    }
    $(document).ready(function () {
        resizeComponents();
    });


</script>