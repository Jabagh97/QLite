@{
    ViewData["Title"] = "Home Page";
    var kioskId = ViewData["KioskID"] as string;
}
<div class="container d-flex flex-column justify-content-center align-items-center h-100">
    <div id="connectionError" class="alert alert-danger mb-4" style="display: none;" role="alert">
        Server is currently down. Please wait while we try to reconnect...
    </div>

    <div id="loadingAnimation" class="text-center mb-4" style="display: none;">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p class="mt-2">Connecting to server...</p>
    </div>

    <div id="content" style="display: none;">
        <div class="text-center">
            <h1 class="display-4 mb-4">Welcome</h1>
            <div id="clock" style="font-size: calc(1vw + 1vh); margin: 0 1%;"></div>
            <h4 id="currentTime" class="mt-3">@DateTime.Now.ToString("D")</h4>
        </div>
    </div>
</div>

<script src="~/js/signalR.js"></script>
<script>
    window.onload = function () {
        diplayClock();
        setInterval("diplayClock()", 1000);
    };
    var kioskId = '@kioskId';



    var huburl = 'http://localhost:7258/communicationHub/?branchId=1111&branchName=IST&clientType=Kiosk&clientName=$TestKIosk&clientId=666&eventId=Waiting;Waiting_T;Service;Park;Final';
    var connection = new signalR.HubConnectionBuilder().withUrl(huburl).build();

    var retryInterval = 5000; // Retry connection every 5 seconds

    function startConnection() {
        connection.start().then(function () {
            console.log("Connected to Communication Hub.");

            sendMessageToDesk("Kiosk is Connected");

            // Connection successful, hide error message and show content
            $("#connectionError").hide();
            $("#loadingAnimation").hide();
            $("#content").show();
        }).catch(function (err) {
            console.error(err.toString());

            // Connection failed, show error message and retry after interval
            $("#connectionError").show();
            $("#loadingAnimation").hide();
            $("#content").hide();

            setTimeout(startConnection, retryInterval);
        });
    }

    function sendMessageToDesk(message) {
        connection.invoke("SendMessageToDesk", message).catch(function (err) {
            console.error(err.toString());
        });
    }

    // Start initial connection
    startConnection();

    // Define an endpoint to handle incoming messages from the server
    connection.on("ReceiveMessage", function (message) {
        // Process the received message here, e.g., update UI
        console.log("Message received from server:", message);
    });

    // Reconnect if the connection is lost
    connection.onclose(startConnection);


    function diplayClock() {
        var today = new Date();
        document.getElementById("currentTime").innerText = `${today.getDate()}-${(today.getMonth() + 1)}-${today.getFullYear()}`;
        var currentTime = updateClock();
        document.getElementById("clock").innerText = currentTime;
    }

    async function getServiceTypeList() {
        const urlSearchParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlSearchParams.entries());
        await getHttpReq('KioskMvc/GetServiceTypeListView');
    }


    async function getHttpReq(url, data) {
        let temp;
        clearTimeout(pageTimeout);
        //if (Date.now() >= Date.parse(`${tokenExpires}`)) {
        //    token = null;
        //}
        await $.ajax({
            url: url,
            type: 'Get',
            data: data,
            contentType: 'application/json; charset=utf-8',
            async: true,
            //headers: {
            //    Authorization: `bearer ${token}`
            //},
            success: function (value) {
                console.log(url + " response:" + JSON.stringify(value));
                temp = value;
                return temp;
            },
            error: async function (ex) {
                //if (ex.status === 401 || Date.now() >= Date.parse(`${tokenExpires}`)) {
                //    await getToken(kioskId);
                //}
                //setError(false, undefined, ex.responseJSON ? ex.responseJSON.Description ?? ex.responseJSON.Description : "");
            }
        });
        return temp;
    }

    async function postHttpReq(url, data) {
        let temp;
        clearTimeout(pageTimeout);
        //if (Date.now() >= Date.parse(`${tokenExpires}`)) {
        //    token = null;
        //}
        await $.ajax({
            url: url,
            type: 'Post',
            data: data,
            contentType: 'application/json; charset=utf-8',
            async: true,
            //headers: {
            //    Authorization: `bearer ${token}`
            //},
            success: function (value) {
                temp = value;
                return temp;
            },
            error: async function (ex) {
                //if (ex.status === 401 || Date.now() >= Date.parse(`${tokenExpires}`)) {
                //    await getToken(kioskId);
                //}
                //setError(false, undefined, ex.responseJSON ? ex.responseJSON.Description ?? ex.responseJSON.Description : "");
            }
        });
        return temp;
    }

</script>
