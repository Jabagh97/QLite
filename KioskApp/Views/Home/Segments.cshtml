@using KioskApp.Helpers;
@using QLite.DesignComponents;
@using QLite.Data;
@using System.Text;
@model DesPageData


@{

    var segments = ViewBag.Segments as List<Segment>;
}

@if (Model != null && Model.Comps != null)
{

    <div id="canvas-container"
     style="
        width: @(Model.Width ?? "100vw");
        height: @(Model.Height ?? "100vh");
        background-image: url('@(Model.BgImageUrl ?? "")');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        border: 1px solid black;
            ">
        @foreach (var comp in Model.Comps)
        {
            @Html.Raw(RenderComponent(comp,segments))
        }
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="row">
            @foreach (var segment in segments)
            {
                <div class="col-md-12 mb-3">
                    <div class="text-center">
                        <button class="btn btn-primary btn-lg" style="font-size: 2rem; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);" onclick="loadServiceView('@segment.Oid')"> @segment.Name </button>
                    </div>
                </div>
            }
        </div>
    </div>


}
@functions {
    public string RenderComponent(DesCompData comp, List<Segment> segments)
    {
        switch (comp)
        {
         

            case DesCompDataWfButton wfButtonComp:
                return ViewHelper.RenderWfButtonComponent(wfButtonComp);

            case DesCompDataSegment segmentComp:
                return ViewHelper.RenderSegmentComponent(segmentComp, segments);

            case DesCompDataGenericHtml htmlComp:
                return ViewHelper.RenderGenericHtmlComponent(htmlComp);


            default:
                return string.Empty; // Unknown component type
        }
    }

}
