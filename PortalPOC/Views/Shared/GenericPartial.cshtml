@model Type

@{
    var modelProperties = Model.GetProperties();
    var viewModelType = ViewBag.ViewModel as Type;
    var viewModelProperties = viewModelType?.GetProperties();
    var filteredProperties = modelProperties.Where(mp => viewModelProperties.Any(vp => vp.Name == mp.Name || mp.Name == "Oid"));
    var action = ViewBag.Action;
    var dropDowns = ViewBag.DropDowns;
    var formData = ViewBag.Data as Dictionary<string, string>;
}

@if (action == "Add" || action == "Edit")
{
    <form asp-controller="GenericTable" asp-action="@(action == "Add" ? "Create" : "Edit")" method="post" id="@(action == "Add" ? "createForm" : "editForm")">
        <div class="row">
            @foreach (var property in filteredProperties)
            {
                var propertyName = property.Name;
                var propertyType = property.PropertyType;
                var inputType = GetInputType(propertyType);
                var isDropDown = dropDowns?.ContainsKey(propertyName) == true;

                <div class="col-md-6">
                    <div class="form-group">
                        @if (property.Name.Contains("Oid"))
                        {
                            <label for="@propertyName" hidden>@propertyName</label>
                            var value = formData?.ContainsKey(propertyName.ToLower()) == true ? formData[propertyName.ToLower()] : "";
                            <!-- Render text input with dynamic type -->
                            <input hidden type="@inputType" name="@propertyName" id="@propertyName" class="form-control" value="@value" />
                        }
                        else
                        {
                            <label for="@propertyName">@propertyName</label>

                            @if (isDropDown)
                            {
                                <!-- Render dropdown for Guid -->
                                <select name="@propertyName" id="@propertyName" class="form-control">
                                    <option value="">-- Select --</option>
                                    @foreach (var item in dropDowns[propertyName])
                                    {
                                        var isSelected = formData?.ContainsKey(propertyName.ToLower()) == true ? true : false;
                                        if (@isSelected)
                                        {
                                            <option value="@item.Oid" selected>@item.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@item.Oid">@item.Name</option>
                                        }
                                    }
                                </select>
                            }
                            else
                            {
                                var value = formData?.ContainsKey(propertyName.ToLower()) == true ? formData[propertyName.ToLower()] : "";
                                <!-- Render text input with dynamic type -->
                                <input type="@inputType" name="@propertyName" id="@propertyName" class="form-control" value="@value" />
                            }
                        }

                      
                    </div>
                </div>
            }
        </div>



        <button type="button" id="submit">@((action == "Add" ? "Create" : "Save"))</button>
    </form>

}

@functions {
    // Helper function to determine input type based on property type
    private string GetInputType(Type propertyType)
    {
        if (IsNullableType(propertyType, out var underlyingType))
        {
            propertyType = underlyingType;
        }

        if (propertyType == typeof(int) || propertyType == typeof(decimal))
        {
            return "number";
        }
        else if (propertyType == typeof(DateTime))
        {
            return "datetime-local";
        }
        else
        {
            return "text";
        }
    }

    // Helper function to check if a type is nullable and get the underlying type
    private bool IsNullableType(Type type, out Type underlyingType)
    {
        underlyingType = Nullable.GetUnderlyingType(type);
        return underlyingType != null;
    }
}
