@model Type

@{
    var modelProperties = Model.GetProperties();
    var viewModelType = ViewBag.ViewModel as Type;
    var viewModelProperties = viewModelType?.GetProperties();
    var filteredProperties = modelProperties.Where(vp => viewModelProperties.Any(mp => mp.Name == vp.Name));
    var action = ViewBag.Action;
    var dropDowns = ViewBag.DropDowns;
}

<form asp-controller="GenericTable" asp-action="Create" method="post" id="createForm">
    @foreach (var property in filteredProperties)
    {
        var propertyType = property.PropertyType;
        var inputType = GetInputType(propertyType);

        <div class="form-group">
            <label for="@property.Name">@property.Name</label>

            @if (dropDowns != null && dropDowns?.ContainsKey(property.Name) )
            {
                <!-- Render dropdown for Guid -->
                <select name="@property.Name" id="@property.Name" class="form-control">
                    <option value="">-- Select --</option>
                    @foreach (var item in dropDowns[property.Name])
                    {
                        <option value="@item.Oid">@item.Name</option>
                    }
                </select>
            }
            else
            {
                <!-- Render text input with dynamic type -->
                <input type="@inputType" name="@property.Name" id="@property.Name" class="form-control" />
            }
        </div>
    }

    <button type="button" id="createButton">Create</button>
</form>

@functions {
    // Helper function to determine input type based on property type
    private string GetInputType(Type propertyType)
    {
        if (IsNullableType(propertyType))
        {
            propertyType = Nullable.GetUnderlyingType(propertyType);
        }

        if (propertyType == typeof(Int32) || propertyType == typeof(decimal) || propertyType == typeof(int))
        {
            return "number";
        }
        else if (propertyType == typeof(DateTime))
        {
            return "datetime-local";
        }
        else
        {
            return "text";
        }
    }

    // Helper function to check if a type is nullable
    private bool IsNullableType(Type type)
    {
        return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>);
    }
}
