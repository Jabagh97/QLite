// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalPOC.Models;

#nullable disable

namespace PortalPOC.Migrations
{
    [DbContext(typeof(QuavisQorchAdminEasyTestContext))]
    [Migration("20231216185551_CreateDataBase")]
    partial class CreateDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PortalPOC.Models.Account", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<byte[]>("LogoS")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Account");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.AccountLanguage", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("Language")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_AccountLanguage");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_AccountLanguage");

                    b.HasIndex(new[] { "Language" }, "iLanguage_AccountLanguage");

                    b.ToTable("AccountLanguage", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Appointment", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NationalID");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_Appointment");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Appointment");

                    b.HasIndex(new[] { "Segment" }, "iSegment_Appointment");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_Appointment");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.AppointmentSetting", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AppointmentPerDay")
                        .HasColumnType("int");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_AppointmentSettings");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_AppointmentSettings");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_AppointmentSettings");

                    b.ToTable("AppointmentSettings");
                });

            modelBuilder.Entity("PortalPOC.Models.AuditDataItemPersistent", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuditedObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("NewObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValue")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("OldObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OldValue")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OperationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "AuditedObject" }, "iAuditedObject_AuditDataItemPersistent");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_AuditDataItemPersistent");

                    b.HasIndex(new[] { "ModifiedOn" }, "iModifiedOn_AuditDataItemPersistent");

                    b.HasIndex(new[] { "NewObject" }, "iNewObject_AuditDataItemPersistent");

                    b.HasIndex(new[] { "OldObject" }, "iOldObject_AuditDataItemPersistent");

                    b.HasIndex(new[] { "OperationType" }, "iOperationType_AuditDataItemPersistent");

                    b.HasIndex(new[] { "UserName" }, "iUserName_AuditDataItemPersistent");

                    b.ToTable("AuditDataItemPersistent", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.AuditedObjectWeakReference", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("GuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IntId")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.ToTable("AuditedObjectWeakReference", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Branch", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("Country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskRestartProfile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Province")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubProvince")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Terminal")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TicketPoolProfile")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Branch");

                    b.HasIndex(new[] { "Country" }, "iCountry_Branch");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Branch");

                    b.HasIndex(new[] { "Province" }, "iProvince_Branch");

                    b.HasIndex(new[] { "SubProvince" }, "iSubProvince_Branch");

                    b.HasIndex(new[] { "TicketPoolProfile" }, "iTicketPoolProfile_Branch");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Country", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("LangCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mask")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Country");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.DashboardDatum", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<bool?>("SynchronizeTitle")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DashboardData");

                    b.ToTable("DashboardData");
                });

            modelBuilder.Entity("PortalPOC.Models.Design", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignTag")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplicationType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("WfStep")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Design");

                    b.ToTable("Design", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.DesignTarget", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Design")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Design" }, "iDesign_DesignTarget");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DesignTarget");

                    b.ToTable("DesignTarget", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Desk", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ActivityStatus")
                        .HasColumnType("int");

                    b.Property<bool?>("Autocall")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrentTicketNumber")
                        .HasColumnType("int");

                    b.Property<string>("DisplayNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<DateTime?>("LastStateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Pano")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_Desk");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Desk");

                    b.HasIndex(new[] { "Pano" }, "iPano_Desk");

                    b.ToTable("Desk", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.DeskCreatableService", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_DeskCreatableServices");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskCreatableServices");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskCreatableServices");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_DeskCreatableServices");

                    b.ToTable("DeskCreatableServices");
                });

            modelBuilder.Entity("PortalPOC.Models.DeskMacroSchedule", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("D1")
                        .HasColumnType("bit");

                    b.Property<bool?>("D2")
                        .HasColumnType("bit");

                    b.Property<bool?>("D3")
                        .HasColumnType("bit");

                    b.Property<bool?>("D4")
                        .HasColumnType("bit");

                    b.Property<bool?>("D5")
                        .HasColumnType("bit");

                    b.Property<bool?>("D6")
                        .HasColumnType("bit");

                    b.Property<bool?>("D7")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("HaftalikRutin")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Macro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<bool?>("Pasif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_DeskMacroSchedule");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskMacroSchedule");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskMacroSchedule");

                    b.HasIndex(new[] { "Macro" }, "iMacro_DeskMacroSchedule");

                    b.HasIndex(new[] { "User" }, "iUser_DeskMacroSchedule");

                    b.ToTable("DeskMacroSchedule", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.DeskStatus", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DeskActivityStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StateEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StateStartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskStatus");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskStatus");

                    b.HasIndex(new[] { "User" }, "iUser_DeskStatus");

                    b.ToTable("DeskStatus", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.DeskTransferableService", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_DeskTransferableServices");

                    b.HasIndex(new[] { "Desk" }, "iDesk_DeskTransferableServices");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_DeskTransferableServices");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_DeskTransferableServices");

                    b.ToTable("DeskTransferableServices");
                });

            modelBuilder.Entity("PortalPOC.Models.KappRelation", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Child")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Child" }, "iChild_KappRelation");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappRelation");

                    b.HasIndex(new[] { "Parent" }, "iParent_KappRelation");

                    b.ToTable("KappRelation", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.KappRole", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BusinessRole")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.ToTable("KappRole", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.KappSessionStep", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KappSession")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("Step")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubStep")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappSessionStep");

                    b.ToTable("KappSessionStep", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.KappSetting", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CacheTimeout")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("Parameter")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParameterValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_KappSettings");

                    b.HasIndex(new[] { "Branch" }, "iBranch_KappSettings");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappSettings");

                    b.HasIndex(new[] { "KioskApplication" }, "iKioskApplication_KappSettings");

                    b.ToTable("KappSettings");
                });

            modelBuilder.Entity("PortalPOC.Models.KappUser", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorizedBranch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CanChangeMacro")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastDesk")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_KappUser");

                    b.HasIndex(new[] { "AuthorizedBranch" }, "iAuthorizedBranch_KappUser");

                    b.HasIndex(new[] { "Branch" }, "iBranch_KappUser");

                    b.HasIndex(new[] { "Desk" }, "iDesk_KappUser");

                    b.HasIndex(new[] { "LastDesk" }, "iLastDesk_KappUser");

                    b.ToTable("KappUser", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.KappWorkflow", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestartProfile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KappWorkflow");

                    b.ToTable("KappWorkflow", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.KioskApplication", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignTag")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("HasDigitalDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("HwId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KappName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("KappWorkflow")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KioskApplicationType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("PlatformAuthClientId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlatformAuthClientSecret")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_KioskApplication");

                    b.HasIndex(new[] { "Branch" }, "iBranch_KioskApplication");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KioskApplication");

                    b.HasIndex(new[] { "KappWorkflow" }, "iKappWorkflow_KioskApplication");

                    b.HasIndex(new[] { "KioskApplicationType" }, "iKioskApplicationType_KioskApplication");

                    b.ToTable("KioskApplication", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.KioskApplicationType", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("QorchAppType")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_KioskApplicationType");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_KioskApplicationType");

                    b.ToTable("KioskApplicationType", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Language", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CultureInfo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LangCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Language");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Macro", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("MacroType")
                        .HasColumnType("int");

                    b.Property<int?>("MaxWaitingTime")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ToThisDesk")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Macro");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Macro");

                    b.ToTable("Macro", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.MacroRule", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("Macro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxWaitingTime")
                        .HasColumnType("int");

                    b.Property<int?>("MinWaitingTime")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ToThisDesk")
                        .HasColumnType("int");

                    b.Property<bool?>("Transfer")
                        .HasColumnType("bit");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_MacroRule");

                    b.HasIndex(new[] { "Macro" }, "iMacro_MacroRule");

                    b.HasIndex(new[] { "Segment" }, "iSegment_MacroRule");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_MacroRule");

                    b.ToTable("MacroRule", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.ModelDifference", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContextId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_ModelDifference");

                    b.ToTable("ModelDifference", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.ModelDifferenceAspect", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_ModelDifferenceAspect");

                    b.HasIndex(new[] { "Owner" }, "iOwner_ModelDifferenceAspect");

                    b.ToTable("ModelDifferenceAspect", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyActionPermissionObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Role")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyActionPermissionObject");

                    b.HasIndex(new[] { "Role" }, "iRole_PermissionPolicyActionPermissionObject");

                    b.ToTable("PermissionPolicyActionPermissionObject", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("Members")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyMemberPermissionsObject");

                    b.HasIndex(new[] { "TypePermissionObject" }, "iTypePermissionObject_PermissionPolicyMemberPermissionsObject");

                    b.ToTable("PermissionPolicyMemberPermissionsObject", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyNavigationPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ItemPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Role")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyNavigationPermissionsObject");

                    b.HasIndex(new[] { "Role" }, "iRole_PermissionPolicyNavigationPermissionsObject");

                    b.ToTable("PermissionPolicyNavigationPermissionsObject", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyObjectPermissionsObject");

                    b.HasIndex(new[] { "TypePermissionObject" }, "iTypePermissionObject_PermissionPolicyObjectPermissionsObject");

                    b.ToTable("PermissionPolicyObjectPermissionsObject", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyRole", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CanEditModel")
                        .HasColumnType("bit");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsAdministrative")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionPolicy")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyRole");

                    b.HasIndex(new[] { "ObjectType" }, "iObjectType_PermissionPolicyRole");

                    b.ToTable("PermissionPolicyRole", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreateState")
                        .HasColumnType("int");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("Role")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyTypePermissionsObject");

                    b.HasIndex(new[] { "Role" }, "iRole_PermissionPolicyTypePermissionsObject");

                    b.ToTable("PermissionPolicyTypePermissionsObject", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyUser", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ChangePasswordOnFirstLogon")
                        .HasColumnType("bit");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("StoredPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_PermissionPolicyUser");

                    b.HasIndex(new[] { "ObjectType" }, "iObjectType_PermissionPolicyUser");

                    b.ToTable("PermissionPolicyUser", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyUserLoginInfo", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProviderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("ProviderUserKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "LoginProviderName", "ProviderUserKey" }, "iLoginProviderNameProviderUserKey_PermissionPolicyUserLoginInfo")
                        .IsUnique()
                        .HasFilter("[LoginProviderName] IS NOT NULL AND [ProviderUserKey] IS NOT NULL");

                    b.HasIndex(new[] { "User" }, "iUser_PermissionPolicyUserLoginInfo");

                    b.ToTable("PermissionPolicyUserLoginInfo", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyUserUsersPermissionPolicyRoleRole", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OID");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Roles")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Users")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Roles", "Users" }, "iRolesUsers_PermissionPolicyUserUsers_PermissionPolicyRoleRoles")
                        .IsUnique()
                        .HasFilter("[Roles] IS NOT NULL AND [Users] IS NOT NULL");

                    b.HasIndex(new[] { "Roles" }, "iRoles_PermissionPolicyUserUsers_PermissionPolicyRoleRoles");

                    b.HasIndex(new[] { "Users" }, "iUsers_PermissionPolicyUserUsers_PermissionPolicyRoleRoles");

                    b.ToTable("PermissionPolicyUserUsers_PermissionPolicyRoleRoles", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Province", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Country" }, "iCountry_Province");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Province");

                    b.ToTable("Province", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.QorchSession", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentStep")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Error")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("InputInfo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InputType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InputValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Workflow")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_QorchSession");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_QorchSession");

                    b.HasIndex(new[] { "KioskApplication" }, "iKioskApplication_QorchSession");

                    b.HasIndex(new[] { "Segment" }, "iSegment_QorchSession");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_QorchSession");

                    b.ToTable("QorchSession", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Resource", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("Language")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("Parameter")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Resource");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Resource");

                    b.HasIndex(new[] { "Language" }, "iLanguage_Resource");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.RestartProfile", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("RestartPerNumOfDays")
                        .HasColumnType("int");

                    b.Property<int?>("RestartPerNumOfSession")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RestartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_RestartProfile");

                    b.ToTable("RestartProfile", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Segment", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_Segment");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Segment");

                    b.HasIndex(new[] { "Parent" }, "iParent_Segment");

                    b.ToTable("Segment", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.ServiceType", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CallInKiosk")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<bool?>("GenTicketByDesk")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SeqNo")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_ServiceType");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_ServiceType");

                    b.HasIndex(new[] { "Parent" }, "iParent_ServiceType");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.SubProvince", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Province")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Country" }, "iCountry_SubProvince");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_SubProvince");

                    b.HasIndex(new[] { "Province" }, "iProvince_SubProvince");

                    b.ToTable("SubProvince", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.Ticket", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CreatedByDesk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByKiosk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CurrentDesk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentState")
                        .HasColumnType("int");

                    b.Property<string>("CustomerInfo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DayOfYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("LangCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("LastOpr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastOprTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SegmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TicketNote")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TicketPool")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ToDesk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ToServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_Ticket");

                    b.HasIndex(new[] { "CurrentDesk" }, "iCurrentDesk_Ticket");

                    b.HasIndex(new[] { "Desk" }, "iDesk_Ticket");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_Ticket");

                    b.HasIndex(new[] { "Segment" }, "iSegment_Ticket");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_Ticket");

                    b.HasIndex(new[] { "ToDesk" }, "iToDesk_Ticket");

                    b.HasIndex(new[] { "ToServiceType" }, "iToServiceType_Ticket");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.TicketPool", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BreakEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BreakStartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CopyNumber")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskApplication")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxWaitingTicketCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MaxWaitingTicketCountControlTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("NotAvailable")
                        .HasColumnType("bit");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<int?>("RangeEnd")
                        .HasColumnType("int");

                    b.Property<int?>("RangeStart")
                        .HasColumnType("int");

                    b.Property<bool?>("ResetOnRange")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime?>("ServiceEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ServiceStartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TicketPoolProfile")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_TicketPool");

                    b.HasIndex(new[] { "Branch" }, "iBranch_TicketPool");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_TicketPool");

                    b.HasIndex(new[] { "KioskApplication" }, "iKioskApplication_TicketPool");

                    b.HasIndex(new[] { "Segment" }, "iSegment_TicketPool");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_TicketPool");

                    b.HasIndex(new[] { "TicketPoolProfile" }, "iTicketPoolProfile_TicketPool");

                    b.ToTable("TicketPool", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.TicketPoolProfile", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Account")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Account" }, "iAccount_TicketPoolProfile");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_TicketPoolProfile");

                    b.ToTable("TicketPoolProfile", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.TicketState", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Branch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallingRuleDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Desk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DeskAppType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<Guid?>("KioskAppId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KioskAppID");

                    b.Property<Guid?>("Macro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<Guid?>("Segment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SegmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ServiceType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Ticket")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TicketCallType")
                        .HasColumnType("int");

                    b.Property<int?>("TicketNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TicketOprValue")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStateValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Branch" }, "iBranch_TicketState");

                    b.HasIndex(new[] { "Desk" }, "iDesk_TicketState");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_TicketState");

                    b.HasIndex(new[] { "Segment" }, "iSegment_TicketState");

                    b.HasIndex(new[] { "ServiceType" }, "iServiceType_TicketState");

                    b.HasIndex(new[] { "Ticket" }, "iTicket_TicketState");

                    b.ToTable("TicketState", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.UploadBo", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_UploadBO");

                    b.ToTable("UploadBO", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.VDeskStatus", b =>
                {
                    b.Property<string>("Account")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("AvarageTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<string>("Branch")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DeskActivityStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessCount")
                        .HasColumnType("int");

                    b.Property<int?>("TicketCount")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("TotalTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable((string)null);

                    b.ToView("V_DeskStatus", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.VUserPerformanceReport", b =>
                {
                    b.Property<TimeSpan?>("AvgProcessTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("AvgWaitingTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("MaxProcessTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("MaxWaitingTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("MinProcessTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("MinWaitingTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TicketCount")
                        .HasColumnType("int");

                    b.Property<int>("TicketCountPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TotalProcessTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalProcessTimePercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TotalWaitingTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalWaitingTimePercentage")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable((string)null);

                    b.ToView("V_UserPerformanceReport", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.XpobjectType", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<string>("AssemblyName")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "TypeName" }, "iTypeName_XPObjectType")
                        .IsUnique()
                        .HasFilter("[TypeName] IS NOT NULL");

                    b.ToTable("XPObjectType", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.XpweakReference", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gcrecord")
                        .HasColumnType("int")
                        .HasColumnName("GCRecord");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int");

                    b.Property<int?>("OptimisticLockField")
                        .HasColumnType("int");

                    b.Property<string>("TargetKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TargetType")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex(new[] { "Gcrecord" }, "iGCRecord_XPWeakReference");

                    b.HasIndex(new[] { "ObjectType" }, "iObjectType_XPWeakReference");

                    b.HasIndex(new[] { "TargetType" }, "iTargetType_XPWeakReference");

                    b.ToTable("XPWeakReference", (string)null);
                });

            modelBuilder.Entity("PortalPOC.Models.AccountLanguage", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("AccountLanguages")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_AccountLanguage_Account");

                    b.HasOne("PortalPOC.Models.Language", "LanguageNavigation")
                        .WithMany("AccountLanguages")
                        .HasForeignKey("Language")
                        .HasConstraintName("FK_AccountLanguage_Language");

                    b.Navigation("AccountNavigation");

                    b.Navigation("LanguageNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Appointment", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_Appointment_Branch");

                    b.HasOne("PortalPOC.Models.Segment", "SegmentNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_Appointment_Segment");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_Appointment_ServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.AppointmentSetting", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("AppointmentSettings")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_AppointmentSettings_Branch");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("AppointmentSettings")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_AppointmentSettings_ServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.AuditDataItemPersistent", b =>
                {
                    b.HasOne("PortalPOC.Models.AuditedObjectWeakReference", "AuditedObjectNavigation")
                        .WithMany("AuditDataItemPersistents")
                        .HasForeignKey("AuditedObject")
                        .HasConstraintName("FK_AuditDataItemPersistent_AuditedObject");

                    b.HasOne("PortalPOC.Models.XpweakReference", "NewObjectNavigation")
                        .WithMany("AuditDataItemPersistentNewObjectNavigations")
                        .HasForeignKey("NewObject")
                        .HasConstraintName("FK_AuditDataItemPersistent_NewObject");

                    b.HasOne("PortalPOC.Models.XpweakReference", "OldObjectNavigation")
                        .WithMany("AuditDataItemPersistentOldObjectNavigations")
                        .HasForeignKey("OldObject")
                        .HasConstraintName("FK_AuditDataItemPersistent_OldObject");

                    b.Navigation("AuditedObjectNavigation");

                    b.Navigation("NewObjectNavigation");

                    b.Navigation("OldObjectNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.AuditedObjectWeakReference", b =>
                {
                    b.HasOne("PortalPOC.Models.XpweakReference", "OidNavigation")
                        .WithOne("AuditedObjectWeakReference")
                        .HasForeignKey("PortalPOC.Models.AuditedObjectWeakReference", "Oid")
                        .IsRequired()
                        .HasConstraintName("FK_AuditedObjectWeakReference_Oid");

                    b.Navigation("OidNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Branch", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Branch_Account");

                    b.HasOne("PortalPOC.Models.Country", "CountryNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Branch_Country");

                    b.HasOne("PortalPOC.Models.Province", "ProvinceNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("Province")
                        .HasConstraintName("FK_Branch_Province");

                    b.HasOne("PortalPOC.Models.SubProvince", "SubProvinceNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("SubProvince")
                        .HasConstraintName("FK_Branch_SubProvince");

                    b.HasOne("PortalPOC.Models.TicketPoolProfile", "TicketPoolProfileNavigation")
                        .WithMany("Branches")
                        .HasForeignKey("TicketPoolProfile")
                        .HasConstraintName("FK_Branch_TicketPoolProfile");

                    b.Navigation("AccountNavigation");

                    b.Navigation("CountryNavigation");

                    b.Navigation("ProvinceNavigation");

                    b.Navigation("SubProvinceNavigation");

                    b.Navigation("TicketPoolProfileNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.DesignTarget", b =>
                {
                    b.HasOne("PortalPOC.Models.Design", "DesignNavigation")
                        .WithMany("DesignTargets")
                        .HasForeignKey("Design")
                        .HasConstraintName("FK_DesignTarget_Design");

                    b.Navigation("DesignNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Desk", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("Desks")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_Desk_Branch");

                    b.HasOne("PortalPOC.Models.KioskApplication", "PanoNavigation")
                        .WithMany("Desks")
                        .HasForeignKey("Pano")
                        .HasConstraintName("FK_Desk_Pano");

                    b.Navigation("BranchNavigation");

                    b.Navigation("PanoNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.DeskCreatableService", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("DeskCreatableServices")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_DeskCreatableServices_Branch");

                    b.HasOne("PortalPOC.Models.Desk", "DeskNavigation")
                        .WithMany("DeskCreatableServices")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_DeskCreatableServices_Desk");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("DeskCreatableServices")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_DeskCreatableServices_ServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.DeskMacroSchedule", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("DeskMacroSchedules")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_DeskMacroSchedule_Branch");

                    b.HasOne("PortalPOC.Models.Desk", "DeskNavigation")
                        .WithMany("DeskMacroSchedules")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_DeskMacroSchedule_Desk");

                    b.HasOne("PortalPOC.Models.Macro", "MacroNavigation")
                        .WithMany("DeskMacroSchedules")
                        .HasForeignKey("Macro")
                        .HasConstraintName("FK_DeskMacroSchedule_Macro");

                    b.HasOne("PortalPOC.Models.KappUser", "UserNavigation")
                        .WithMany("DeskMacroSchedules")
                        .HasForeignKey("User")
                        .HasConstraintName("FK_DeskMacroSchedule_User");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("MacroNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.DeskTransferableService", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("DeskTransferableServices")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_DeskTransferableServices_Branch");

                    b.HasOne("PortalPOC.Models.Desk", "DeskNavigation")
                        .WithMany("DeskTransferableServices")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_DeskTransferableServices_Desk");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("DeskTransferableServices")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_DeskTransferableServices_ServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.KappRelation", b =>
                {
                    b.HasOne("PortalPOC.Models.KioskApplication", "ChildNavigation")
                        .WithMany("KappRelationChildNavigations")
                        .HasForeignKey("Child")
                        .HasConstraintName("FK_KappRelation_Child");

                    b.HasOne("PortalPOC.Models.KioskApplication", "ParentNavigation")
                        .WithMany("KappRelationParentNavigations")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_KappRelation_Parent");

                    b.Navigation("ChildNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.KappRole", b =>
                {
                    b.HasOne("PortalPOC.Models.PermissionPolicyRole", "OidNavigation")
                        .WithOne("KappRole")
                        .HasForeignKey("PortalPOC.Models.KappRole", "Oid")
                        .IsRequired()
                        .HasConstraintName("FK_KappRole_Oid");

                    b.Navigation("OidNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.KappSetting", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("KappSettings")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_KappSettings_Account");

                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("KappSettings")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_KappSettings_Branch");

                    b.HasOne("PortalPOC.Models.KioskApplication", "KioskApplicationNavigation")
                        .WithMany("KappSettings")
                        .HasForeignKey("KioskApplication")
                        .HasConstraintName("FK_KappSettings_KioskApplication");

                    b.Navigation("AccountNavigation");

                    b.Navigation("BranchNavigation");

                    b.Navigation("KioskApplicationNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.KappUser", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("KappUsers")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_KappUser_Account");

                    b.HasOne("PortalPOC.Models.Branch", "AuthorizedBranchNavigation")
                        .WithMany("KappUserAuthorizedBranchNavigations")
                        .HasForeignKey("AuthorizedBranch")
                        .HasConstraintName("FK_KappUser_AuthorizedBranch");

                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("KappUserBranchNavigations")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_KappUser_Branch");

                    b.HasOne("PortalPOC.Models.Desk", "DeskNavigation")
                        .WithMany("KappUserDeskNavigations")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_KappUser_Desk");

                    b.HasOne("PortalPOC.Models.Desk", "LastDeskNavigation")
                        .WithMany("KappUserLastDeskNavigations")
                        .HasForeignKey("LastDesk")
                        .HasConstraintName("FK_KappUser_LastDesk");

                    b.HasOne("PortalPOC.Models.PermissionPolicyUser", "OidNavigation")
                        .WithOne("KappUser")
                        .HasForeignKey("PortalPOC.Models.KappUser", "Oid")
                        .IsRequired()
                        .HasConstraintName("FK_KappUser_Oid");

                    b.Navigation("AccountNavigation");

                    b.Navigation("AuthorizedBranchNavigation");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("LastDeskNavigation");

                    b.Navigation("OidNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.KioskApplication", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_KioskApplication_Account");

                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_KioskApplication_Branch");

                    b.HasOne("PortalPOC.Models.KappWorkflow", "KappWorkflowNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("KappWorkflow")
                        .HasConstraintName("FK_KioskApplication_KappWorkflow");

                    b.HasOne("PortalPOC.Models.KioskApplicationType", "KioskApplicationTypeNavigation")
                        .WithMany("KioskApplications")
                        .HasForeignKey("KioskApplicationType")
                        .HasConstraintName("FK_KioskApplication_KioskApplicationType");

                    b.Navigation("AccountNavigation");

                    b.Navigation("BranchNavigation");

                    b.Navigation("KappWorkflowNavigation");

                    b.Navigation("KioskApplicationTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.KioskApplicationType", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("KioskApplicationTypes")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_KioskApplicationType_Account");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Macro", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("Macros")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Macro_Account");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.MacroRule", b =>
                {
                    b.HasOne("PortalPOC.Models.Macro", "MacroNavigation")
                        .WithMany("MacroRules")
                        .HasForeignKey("Macro")
                        .HasConstraintName("FK_MacroRule_Macro");

                    b.HasOne("PortalPOC.Models.Segment", "SegmentNavigation")
                        .WithMany("MacroRules")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_MacroRule_Segment");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("MacroRules")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_MacroRule_ServiceType");

                    b.Navigation("MacroNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.ModelDifferenceAspect", b =>
                {
                    b.HasOne("PortalPOC.Models.ModelDifference", "OwnerNavigation")
                        .WithMany("ModelDifferenceAspects")
                        .HasForeignKey("Owner")
                        .HasConstraintName("FK_ModelDifferenceAspect_Owner");

                    b.Navigation("OwnerNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyActionPermissionObject", b =>
                {
                    b.HasOne("PortalPOC.Models.PermissionPolicyRole", "RoleNavigation")
                        .WithMany("PermissionPolicyActionPermissionObjects")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_PermissionPolicyActionPermissionObject_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.HasOne("PortalPOC.Models.PermissionPolicyTypePermissionsObject", "TypePermissionObjectNavigation")
                        .WithMany("PermissionPolicyMemberPermissionsObjects")
                        .HasForeignKey("TypePermissionObject")
                        .HasConstraintName("FK_PermissionPolicyMemberPermissionsObject_TypePermissionObject");

                    b.Navigation("TypePermissionObjectNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyNavigationPermissionsObject", b =>
                {
                    b.HasOne("PortalPOC.Models.PermissionPolicyRole", "RoleNavigation")
                        .WithMany("PermissionPolicyNavigationPermissionsObjects")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_PermissionPolicyNavigationPermissionsObject_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.HasOne("PortalPOC.Models.PermissionPolicyTypePermissionsObject", "TypePermissionObjectNavigation")
                        .WithMany("PermissionPolicyObjectPermissionsObjects")
                        .HasForeignKey("TypePermissionObject")
                        .HasConstraintName("FK_PermissionPolicyObjectPermissionsObject_TypePermissionObject");

                    b.Navigation("TypePermissionObjectNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyRole", b =>
                {
                    b.HasOne("PortalPOC.Models.XpobjectType", "ObjectTypeNavigation")
                        .WithMany("PermissionPolicyRoles")
                        .HasForeignKey("ObjectType")
                        .HasConstraintName("FK_PermissionPolicyRole_ObjectType");

                    b.Navigation("ObjectTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.HasOne("PortalPOC.Models.PermissionPolicyRole", "RoleNavigation")
                        .WithMany("PermissionPolicyTypePermissionsObjects")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_PermissionPolicyTypePermissionsObject_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyUser", b =>
                {
                    b.HasOne("PortalPOC.Models.XpobjectType", "ObjectTypeNavigation")
                        .WithMany("PermissionPolicyUsers")
                        .HasForeignKey("ObjectType")
                        .HasConstraintName("FK_PermissionPolicyUser_ObjectType");

                    b.Navigation("ObjectTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyUserLoginInfo", b =>
                {
                    b.HasOne("PortalPOC.Models.KappUser", "UserNavigation")
                        .WithMany("PermissionPolicyUserLoginInfos")
                        .HasForeignKey("User")
                        .HasConstraintName("FK_PermissionPolicyUserLoginInfo_User");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyUserUsersPermissionPolicyRoleRole", b =>
                {
                    b.HasOne("PortalPOC.Models.PermissionPolicyRole", "RolesNavigation")
                        .WithMany("PermissionPolicyUserUsersPermissionPolicyRoleRoles")
                        .HasForeignKey("Roles")
                        .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Roles");

                    b.HasOne("PortalPOC.Models.PermissionPolicyUser", "UsersNavigation")
                        .WithMany("PermissionPolicyUserUsersPermissionPolicyRoleRoles")
                        .HasForeignKey("Users")
                        .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Users");

                    b.Navigation("RolesNavigation");

                    b.Navigation("UsersNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Province", b =>
                {
                    b.HasOne("PortalPOC.Models.Country", "CountryNavigation")
                        .WithMany("Provinces")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Province_Country");

                    b.Navigation("CountryNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.QorchSession", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_QorchSession_Account");

                    b.HasOne("PortalPOC.Models.KioskApplication", "KioskApplicationNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("KioskApplication")
                        .HasConstraintName("FK_QorchSession_KioskApplication");

                    b.HasOne("PortalPOC.Models.Segment", "SegmentNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_QorchSession_Segment");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("QorchSessions")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_QorchSession_ServiceType");

                    b.Navigation("AccountNavigation");

                    b.Navigation("KioskApplicationNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Resource", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("Resources")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Resource_Account");

                    b.HasOne("PortalPOC.Models.Language", "LanguageNavigation")
                        .WithMany("Resources")
                        .HasForeignKey("Language")
                        .HasConstraintName("FK_Resource_Language");

                    b.Navigation("AccountNavigation");

                    b.Navigation("LanguageNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Segment", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("Segments")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_Segment_Account");

                    b.HasOne("PortalPOC.Models.Segment", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_Segment_Parent");

                    b.Navigation("AccountNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.ServiceType", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_ServiceType_Account");

                    b.HasOne("PortalPOC.Models.ServiceType", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_ServiceType_Parent");

                    b.Navigation("AccountNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.SubProvince", b =>
                {
                    b.HasOne("PortalPOC.Models.Country", "CountryNavigation")
                        .WithMany("SubProvinces")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_SubProvince_Country");

                    b.HasOne("PortalPOC.Models.Province", "ProvinceNavigation")
                        .WithMany("SubProvinces")
                        .HasForeignKey("Province")
                        .HasConstraintName("FK_SubProvince_Province");

                    b.Navigation("CountryNavigation");

                    b.Navigation("ProvinceNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Ticket", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_Ticket_Branch");

                    b.HasOne("PortalPOC.Models.Desk", "CurrentDeskNavigation")
                        .WithMany("TicketCurrentDeskNavigations")
                        .HasForeignKey("CurrentDesk")
                        .HasConstraintName("FK_Ticket_CurrentDesk");

                    b.HasOne("PortalPOC.Models.Desk", "DeskNavigation")
                        .WithMany("TicketDeskNavigations")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_Ticket_Desk");

                    b.HasOne("PortalPOC.Models.Segment", "SegmentNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_Ticket_Segment");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("TicketServiceTypeNavigations")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_Ticket_ServiceType");

                    b.HasOne("PortalPOC.Models.Desk", "ToDeskNavigation")
                        .WithMany("TicketToDeskNavigations")
                        .HasForeignKey("ToDesk")
                        .HasConstraintName("FK_Ticket_ToDesk");

                    b.HasOne("PortalPOC.Models.ServiceType", "ToServiceTypeNavigation")
                        .WithMany("TicketToServiceTypeNavigations")
                        .HasForeignKey("ToServiceType")
                        .HasConstraintName("FK_Ticket_ToServiceType");

                    b.Navigation("BranchNavigation");

                    b.Navigation("CurrentDeskNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");

                    b.Navigation("ToDeskNavigation");

                    b.Navigation("ToServiceTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.TicketPool", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_TicketPool_Account");

                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_TicketPool_Branch");

                    b.HasOne("PortalPOC.Models.KioskApplication", "KioskApplicationNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("KioskApplication")
                        .HasConstraintName("FK_TicketPool_KioskApplication");

                    b.HasOne("PortalPOC.Models.Segment", "SegmentNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_TicketPool_Segment");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_TicketPool_ServiceType");

                    b.HasOne("PortalPOC.Models.TicketPoolProfile", "TicketPoolProfileNavigation")
                        .WithMany("TicketPools")
                        .HasForeignKey("TicketPoolProfile")
                        .HasConstraintName("FK_TicketPool_TicketPoolProfile");

                    b.Navigation("AccountNavigation");

                    b.Navigation("BranchNavigation");

                    b.Navigation("KioskApplicationNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");

                    b.Navigation("TicketPoolProfileNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.TicketPoolProfile", b =>
                {
                    b.HasOne("PortalPOC.Models.Account", "AccountNavigation")
                        .WithMany("TicketPoolProfiles")
                        .HasForeignKey("Account")
                        .HasConstraintName("FK_TicketPoolProfile_Account");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.TicketState", b =>
                {
                    b.HasOne("PortalPOC.Models.Branch", "BranchNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Branch")
                        .HasConstraintName("FK_TicketState_Branch");

                    b.HasOne("PortalPOC.Models.Desk", "DeskNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Desk")
                        .HasConstraintName("FK_TicketState_Desk");

                    b.HasOne("PortalPOC.Models.Segment", "SegmentNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Segment")
                        .HasConstraintName("FK_TicketState_Segment");

                    b.HasOne("PortalPOC.Models.ServiceType", "ServiceTypeNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_TicketState_ServiceType");

                    b.HasOne("PortalPOC.Models.Ticket", "TicketNavigation")
                        .WithMany("TicketStates")
                        .HasForeignKey("Ticket")
                        .HasConstraintName("FK_TicketState_Ticket");

                    b.Navigation("BranchNavigation");

                    b.Navigation("DeskNavigation");

                    b.Navigation("SegmentNavigation");

                    b.Navigation("ServiceTypeNavigation");

                    b.Navigation("TicketNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.XpweakReference", b =>
                {
                    b.HasOne("PortalPOC.Models.XpobjectType", "ObjectTypeNavigation")
                        .WithMany("XpweakReferenceObjectTypeNavigations")
                        .HasForeignKey("ObjectType")
                        .HasConstraintName("FK_XPWeakReference_ObjectType");

                    b.HasOne("PortalPOC.Models.XpobjectType", "TargetTypeNavigation")
                        .WithMany("XpweakReferenceTargetTypeNavigations")
                        .HasForeignKey("TargetType")
                        .HasConstraintName("FK_XPWeakReference_TargetType");

                    b.Navigation("ObjectTypeNavigation");

                    b.Navigation("TargetTypeNavigation");
                });

            modelBuilder.Entity("PortalPOC.Models.Account", b =>
                {
                    b.Navigation("AccountLanguages");

                    b.Navigation("Branches");

                    b.Navigation("KappSettings");

                    b.Navigation("KappUsers");

                    b.Navigation("KioskApplicationTypes");

                    b.Navigation("KioskApplications");

                    b.Navigation("Macros");

                    b.Navigation("QorchSessions");

                    b.Navigation("Resources");

                    b.Navigation("Segments");

                    b.Navigation("ServiceTypes");

                    b.Navigation("TicketPoolProfiles");

                    b.Navigation("TicketPools");
                });

            modelBuilder.Entity("PortalPOC.Models.AuditedObjectWeakReference", b =>
                {
                    b.Navigation("AuditDataItemPersistents");
                });

            modelBuilder.Entity("PortalPOC.Models.Branch", b =>
                {
                    b.Navigation("AppointmentSettings");

                    b.Navigation("Appointments");

                    b.Navigation("DeskCreatableServices");

                    b.Navigation("DeskMacroSchedules");

                    b.Navigation("DeskTransferableServices");

                    b.Navigation("Desks");

                    b.Navigation("KappSettings");

                    b.Navigation("KappUserAuthorizedBranchNavigations");

                    b.Navigation("KappUserBranchNavigations");

                    b.Navigation("KioskApplications");

                    b.Navigation("TicketPools");

                    b.Navigation("TicketStates");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("PortalPOC.Models.Country", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Provinces");

                    b.Navigation("SubProvinces");
                });

            modelBuilder.Entity("PortalPOC.Models.Design", b =>
                {
                    b.Navigation("DesignTargets");
                });

            modelBuilder.Entity("PortalPOC.Models.Desk", b =>
                {
                    b.Navigation("DeskCreatableServices");

                    b.Navigation("DeskMacroSchedules");

                    b.Navigation("DeskTransferableServices");

                    b.Navigation("KappUserDeskNavigations");

                    b.Navigation("KappUserLastDeskNavigations");

                    b.Navigation("TicketCurrentDeskNavigations");

                    b.Navigation("TicketDeskNavigations");

                    b.Navigation("TicketStates");

                    b.Navigation("TicketToDeskNavigations");
                });

            modelBuilder.Entity("PortalPOC.Models.KappUser", b =>
                {
                    b.Navigation("DeskMacroSchedules");

                    b.Navigation("PermissionPolicyUserLoginInfos");
                });

            modelBuilder.Entity("PortalPOC.Models.KappWorkflow", b =>
                {
                    b.Navigation("KioskApplications");
                });

            modelBuilder.Entity("PortalPOC.Models.KioskApplication", b =>
                {
                    b.Navigation("Desks");

                    b.Navigation("KappRelationChildNavigations");

                    b.Navigation("KappRelationParentNavigations");

                    b.Navigation("KappSettings");

                    b.Navigation("QorchSessions");

                    b.Navigation("TicketPools");
                });

            modelBuilder.Entity("PortalPOC.Models.KioskApplicationType", b =>
                {
                    b.Navigation("KioskApplications");
                });

            modelBuilder.Entity("PortalPOC.Models.Language", b =>
                {
                    b.Navigation("AccountLanguages");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("PortalPOC.Models.Macro", b =>
                {
                    b.Navigation("DeskMacroSchedules");

                    b.Navigation("MacroRules");
                });

            modelBuilder.Entity("PortalPOC.Models.ModelDifference", b =>
                {
                    b.Navigation("ModelDifferenceAspects");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyRole", b =>
                {
                    b.Navigation("KappRole");

                    b.Navigation("PermissionPolicyActionPermissionObjects");

                    b.Navigation("PermissionPolicyNavigationPermissionsObjects");

                    b.Navigation("PermissionPolicyTypePermissionsObjects");

                    b.Navigation("PermissionPolicyUserUsersPermissionPolicyRoleRoles");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyTypePermissionsObject", b =>
                {
                    b.Navigation("PermissionPolicyMemberPermissionsObjects");

                    b.Navigation("PermissionPolicyObjectPermissionsObjects");
                });

            modelBuilder.Entity("PortalPOC.Models.PermissionPolicyUser", b =>
                {
                    b.Navigation("KappUser");

                    b.Navigation("PermissionPolicyUserUsersPermissionPolicyRoleRoles");
                });

            modelBuilder.Entity("PortalPOC.Models.Province", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("SubProvinces");
                });

            modelBuilder.Entity("PortalPOC.Models.Segment", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("InverseParentNavigation");

                    b.Navigation("MacroRules");

                    b.Navigation("QorchSessions");

                    b.Navigation("TicketPools");

                    b.Navigation("TicketStates");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("PortalPOC.Models.ServiceType", b =>
                {
                    b.Navigation("AppointmentSettings");

                    b.Navigation("Appointments");

                    b.Navigation("DeskCreatableServices");

                    b.Navigation("DeskTransferableServices");

                    b.Navigation("InverseParentNavigation");

                    b.Navigation("MacroRules");

                    b.Navigation("QorchSessions");

                    b.Navigation("TicketPools");

                    b.Navigation("TicketServiceTypeNavigations");

                    b.Navigation("TicketStates");

                    b.Navigation("TicketToServiceTypeNavigations");
                });

            modelBuilder.Entity("PortalPOC.Models.SubProvince", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("PortalPOC.Models.Ticket", b =>
                {
                    b.Navigation("TicketStates");
                });

            modelBuilder.Entity("PortalPOC.Models.TicketPoolProfile", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("TicketPools");
                });

            modelBuilder.Entity("PortalPOC.Models.XpobjectType", b =>
                {
                    b.Navigation("PermissionPolicyRoles");

                    b.Navigation("PermissionPolicyUsers");

                    b.Navigation("XpweakReferenceObjectTypeNavigations");

                    b.Navigation("XpweakReferenceTargetTypeNavigations");
                });

            modelBuilder.Entity("PortalPOC.Models.XpweakReference", b =>
                {
                    b.Navigation("AuditDataItemPersistentNewObjectNavigations");

                    b.Navigation("AuditDataItemPersistentOldObjectNavigations");

                    b.Navigation("AuditedObjectWeakReference");
                });
#pragma warning restore 612, 618
        }
    }
}
